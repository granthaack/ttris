
ttris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00000548  000005dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000548  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f8  008001a8  008001a8  00000684  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001703  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afc  00000000  00000000  00001ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3f  00000000  00000000  000029cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  0000340c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000501  00000000  00000000  000035bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f2b  00000000  00000000  00003abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  000049e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3a       	cpi	r26, 0xA8	; 168
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a8 ea       	ldi	r26, 0xA8	; 168
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3a       	cpi	r26, 0xA0	; 160
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 45 02 	call	0x48a	; 0x48a <main>
  9e:	0c 94 a2 02 	jmp	0x544	; 0x544 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <check_collision>:
#include "game.h"

void check_collision(struct sprite* spr)
{
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	ec 01       	movw	r28, r24
	//Clear all the collisions since they will be recalculated
	spr->coll ^= spr->coll;
  b2:	18 86       	std	Y+8, r1	; 0x08
	
	//SCREEN COLLISIONS
	//If sprite has collided with the left of the screen
	if(spr->x_pos <= 0)
  b4:	4a 81       	ldd	r20, Y+2	; 0x02
  b6:	41 11       	cpse	r20, r1
  b8:	5f c0       	rjmp	.+190    	; 0x178 <check_collision+0xd2>
	{
		//Set the 4th collision bit
		spr->coll |= 0b00001000;
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	88 87       	std	Y+8, r24	; 0x08
  be:	2a e0       	ldi	r18, 0x0A	; 10
  c0:	98 e0       	ldi	r25, 0x08	; 8
	}

	//If sprite has collided with the top of the screen
	if(spr->y_pos <= 0)
  c2:	8b 81       	ldd	r24, Y+3	; 0x03
  c4:	81 11       	cpse	r24, r1
  c6:	02 c0       	rjmp	.+4      	; 0xcc <check_collision+0x26>
	{
		//Set the 2nd collision bit
		spr->coll |= 0b00000010;
  c8:	28 87       	std	Y+8, r18	; 0x08
  ca:	92 2f       	mov	r25, r18
	}
	
	//If sprite has collided with the right of the screen
	if(((spr->x_pos)+spr->wdth) >= 83)
  cc:	6e 81       	ldd	r22, Y+6	; 0x06
  ce:	26 2f       	mov	r18, r22
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	24 0f       	add	r18, r20
  d4:	31 1d       	adc	r19, r1
  d6:	23 35       	cpi	r18, 0x53	; 83
  d8:	31 05       	cpc	r19, r1
  da:	14 f0       	brlt	.+4      	; 0xe0 <check_collision+0x3a>
	{
		//Set the 3rd collision bit
		spr->coll |= 0b00000100;
  dc:	94 60       	ori	r25, 0x04	; 4
  de:	98 87       	std	Y+8, r25	; 0x08
	}

	//If sprite has collided with the bottom of the screen
	if(((spr->y_pos)+spr->hght) >= 47)
  e0:	2f 81       	ldd	r18, Y+7	; 0x07
  e2:	42 2f       	mov	r20, r18
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	48 0f       	add	r20, r24
  e8:	51 1d       	adc	r21, r1
  ea:	4f 32       	cpi	r20, 0x2F	; 47
  ec:	51 05       	cpc	r21, r1
  ee:	14 f0       	brlt	.+4      	; 0xf4 <check_collision+0x4e>
	{
		//Set the 1st collision bit
		spr->coll |= 0b00000001;
  f0:	91 60       	ori	r25, 0x01	; 1
  f2:	98 87       	std	Y+8, r25	; 0x08
	}
	
	//PIECE COLLISIONS
	//Check if sprite has left collided with another piece if it hasn't already collided with a wall
	
	if(!(spr->coll & 0b00001000))
  f4:	93 fd       	sbrc	r25, 3
  f6:	3a c0       	rjmp	.+116    	; 0x16c <check_collision+0xc6>
	{
			//Scan the sprite column by column
			bool spr_px = 0;
			bool fbf_px = 0;
			for(uint8_t x = 0; x < spr->wdth; x++)
  f8:	66 23       	and	r22, r22
  fa:	c1 f1       	breq	.+112    	; 0x16c <check_collision+0xc6>
  fc:	00 e0       	ldi	r16, 0x00	; 0
			{
				for(uint8_t y = 0;  y < spr->hght; y++)
  fe:	22 23       	and	r18, r18
 100:	61 f1       	breq	.+88     	; 0x15a <check_collision+0xb4>
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	04 c0       	rjmp	.+8      	; 0x10e <check_collision+0x68>
 106:	1f 5f       	subi	r17, 0xFF	; 255
 108:	8f 81       	ldd	r24, Y+7	; 0x07
 10a:	18 17       	cp	r17, r24
 10c:	60 f5       	brcc	.+88     	; 0x166 <check_collision+0xc0>
				{
					//Get the current sprite pixel from the spritemap
					spr_px = read_pixel((spr->x_map+x), (spr->y_map+y), spritemap);
 10e:	69 81       	ldd	r22, Y+1	; 0x01
 110:	61 0f       	add	r22, r17
 112:	88 81       	ld	r24, Y
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	51 e0       	ldi	r21, 0x01	; 1
 118:	80 0f       	add	r24, r16
 11a:	0e 94 31 01 	call	0x262	; 0x262 <read_pixel>
 11e:	f8 2e       	mov	r15, r24
					//Get the current fbuff pixel directly to the left of the current sprite pixel in the fbuff
					fbf_px = read_pixel((spr->x_pos + x - 1), (spr->y_pos + y), fbuff);
 120:	6b 81       	ldd	r22, Y+3	; 0x03
 122:	61 0f       	add	r22, r17
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	81 50       	subi	r24, 0x01	; 1
 128:	48 ea       	ldi	r20, 0xA8	; 168
 12a:	51 e0       	ldi	r21, 0x01	; 1
 12c:	80 0f       	add	r24, r16
 12e:	0e 94 31 01 	call	0x262	; 0x262 <read_pixel>
					//If the pixel to the left of an active sprite pixel in the fbuff is 1 AND it's not a sprite pixel, there is a collision
					if(fbf_px && spr_px && (!(read_pixel((spr->x_map + x - 1), (spr->y_map+y), spritemap))))
 132:	88 23       	and	r24, r24
 134:	41 f3       	breq	.-48     	; 0x106 <check_collision+0x60>
 136:	ff 20       	and	r15, r15
 138:	31 f3       	breq	.-52     	; 0x106 <check_collision+0x60>
 13a:	69 81       	ldd	r22, Y+1	; 0x01
 13c:	61 0f       	add	r22, r17
 13e:	88 81       	ld	r24, Y
 140:	81 50       	subi	r24, 0x01	; 1
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	51 e0       	ldi	r21, 0x01	; 1
 146:	80 0f       	add	r24, r16
 148:	0e 94 31 01 	call	0x262	; 0x262 <read_pixel>
 14c:	81 11       	cpse	r24, r1
 14e:	db cf       	rjmp	.-74     	; 0x106 <check_collision+0x60>
					{
						//Set the 4th collision bit and break the loop
						spr->coll |= 0b00001000;
 150:	98 85       	ldd	r25, Y+8	; 0x08
 152:	98 60       	ori	r25, 0x08	; 8
 154:	98 87       	std	Y+8, r25	; 0x08
 156:	98 70       	andi	r25, 0x08	; 8
						break;
					}
				}
				//If a left collision has been detected, don't look for any more left collisions
				if(spr->coll & 0b00001000)
 158:	49 f4       	brne	.+18     	; 0x16c <check_collision+0xc6>
	if(!(spr->coll & 0b00001000))
	{
			//Scan the sprite column by column
			bool spr_px = 0;
			bool fbf_px = 0;
			for(uint8_t x = 0; x < spr->wdth; x++)
 15a:	0f 5f       	subi	r16, 0xFF	; 255
 15c:	8e 81       	ldd	r24, Y+6	; 0x06
 15e:	08 17       	cp	r16, r24
 160:	28 f4       	brcc	.+10     	; 0x16c <check_collision+0xc6>
 162:	2f 81       	ldd	r18, Y+7	; 0x07
 164:	cc cf       	rjmp	.-104    	; 0xfe <check_collision+0x58>
 166:	98 85       	ldd	r25, Y+8	; 0x08
 168:	98 70       	andi	r25, 0x08	; 8
						spr->coll |= 0b00001000;
						break;
					}
				}
				//If a left collision has been detected, don't look for any more left collisions
				if(spr->coll & 0b00001000)
 16a:	b9 f3       	breq	.-18     	; 0x15a <check_collision+0xb4>
				}
			}

	}
	
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	08 95       	ret
 178:	22 e0       	ldi	r18, 0x02	; 2
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	a2 cf       	rjmp	.-188    	; 0xc2 <check_collision+0x1c>

0000017e <init_screen>:
	return;
}

void init_screen(void)
{
	DDR_SPI|=((1<<DD_DC)|(1<<DD_RST));
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	83 60       	ori	r24, 0x03	; 3
 182:	84 b9       	out	0x04, r24	; 4
	//Toggle the reset pin then set it high
	PORT_SPI |= (PORT_RST);
 184:	28 9a       	sbi	0x05, 0	; 5
	PORT_SPI &= ~(PORT_RST);
 186:	28 98       	cbi	0x05, 0	; 5
	PORT_SPI |= (PORT_RST);
 188:	28 9a       	sbi	0x05, 0	; 5
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 18a:	81 e2       	ldi	r24, 0x21	; 33
 18c:	8e bd       	out	0x2e, r24	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 18e:	0d b4       	in	r0, 0x2d	; 45
 190:	07 fe       	sbrs	r0, 7
 192:	fd cf       	rjmp	.-6      	; 0x18e <init_screen+0x10>
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 194:	80 e9       	ldi	r24, 0x90	; 144
 196:	8e bd       	out	0x2e, r24	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 198:	0d b4       	in	r0, 0x2d	; 45
 19a:	07 fe       	sbrs	r0, 7
 19c:	fd cf       	rjmp	.-6      	; 0x198 <init_screen+0x1a>
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 19e:	80 e2       	ldi	r24, 0x20	; 32
 1a0:	8e bd       	out	0x2e, r24	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 1a2:	0d b4       	in	r0, 0x2d	; 45
 1a4:	07 fe       	sbrs	r0, 7
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <init_screen+0x24>
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
 1aa:	8e bd       	out	0x2e, r24	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 1ac:	0d b4       	in	r0, 0x2d	; 45
 1ae:	07 fe       	sbrs	r0, 7
 1b0:	fd cf       	rjmp	.-6      	; 0x1ac <init_screen+0x2e>
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 1b2:	80 e8       	ldi	r24, 0x80	; 128
 1b4:	8e bd       	out	0x2e, r24	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 1b6:	0d b4       	in	r0, 0x2d	; 45
 1b8:	07 fe       	sbrs	r0, 7
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <init_screen+0x38>
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 1bc:	80 e4       	ldi	r24, 0x40	; 64
 1be:	8e bd       	out	0x2e, r24	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 1c0:	0d b4       	in	r0, 0x2d	; 45
 1c2:	07 fe       	sbrs	r0, 7
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <init_screen+0x42>
	send_byte(0b00001100, COMM);
	//set x DDRAM address to 0
	send_byte(0b10000000, COMM);
	//set y DDRAM address to 0
	send_byte(0b01000000, COMM);
}
 1c6:	08 95       	ret

000001c8 <set_ddram_x_addr>:

//Sets the x address in the screen's ddram
void set_ddram_x_addr(uint8_t x)
{
	send_byte((x | 0b10000000), COMM);
 1c8:	80 68       	ori	r24, 0x80	; 128
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 1ca:	8e bd       	out	0x2e, r24	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 1cc:	0d b4       	in	r0, 0x2d	; 45
 1ce:	07 fe       	sbrs	r0, 7
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <set_ddram_x_addr+0x4>

//Sets the x address in the screen's ddram
void set_ddram_x_addr(uint8_t x)
{
	send_byte((x | 0b10000000), COMM);
}
 1d2:	08 95       	ret

000001d4 <set_ddram_y_addr>:

//Sets the y address in the screen's ddram. Note that this takes the address of the 
//BYTE of ddram you want to modify, not the index of the pixel you want to modify.
void set_ddram_y_addr(uint8_t y)
{
	send_byte((y | 0b01000000), COMM);
 1d4:	80 64       	ori	r24, 0x40	; 64
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 1d6:	8e bd       	out	0x2e, r24	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 1d8:	0d b4       	in	r0, 0x2d	; 45
 1da:	07 fe       	sbrs	r0, 7
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <set_ddram_y_addr+0x4>
//Sets the y address in the screen's ddram. Note that this takes the address of the 
//BYTE of ddram you want to modify, not the index of the pixel you want to modify.
void set_ddram_y_addr(uint8_t y)
{
	send_byte((y | 0b01000000), COMM);
}
 1de:	08 95       	ret

000001e0 <set_pixel>:
//buffer and sending the whole buffer to the screen, this function only changes
//the necessary pixels on the display. Note that the x and y address of the current
void set_pixel(uint8_t x, uint8_t y, bool color)
{
	//if out of bounds
	if(x > 83 || y > 47)
 1e0:	84 35       	cpi	r24, 0x54	; 84
 1e2:	00 f5       	brcc	.+64     	; 0x224 <set_pixel+0x44>
 1e4:	60 33       	cpi	r22, 0x30	; 48
 1e6:	f0 f4       	brcc	.+60     	; 0x224 <set_pixel+0x44>
	{
		return;
	}

	//Which byte to manipulate
	uint8_t i = y/8;
 1e8:	e6 2f       	mov	r30, r22
 1ea:	e6 95       	lsr	r30
 1ec:	e6 95       	lsr	r30
 1ee:	e6 95       	lsr	r30
	//Which bit in the byte to manipulate
	uint8_t pos = y%8;
	//Positioning the byte for masking or oring
	uint8_t flag = 0x01;
	flag = flag << pos;
 1f0:	67 70       	andi	r22, 0x07	; 7
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <set_pixel+0x1a>
 1f8:	22 0f       	add	r18, r18
 1fa:	6a 95       	dec	r22
 1fc:	ea f7       	brpl	.-6      	; 0x1f8 <set_pixel+0x18>

	//If setting it black, bitwise or
	if(color)
 1fe:	44 23       	and	r20, r20
 200:	91 f0       	breq	.+36     	; 0x226 <set_pixel+0x46>
	{
		//write the changes to the internal fbuff
		fbuff[i][x] = fbuff[i][x] | flag;
 202:	94 e5       	ldi	r25, 0x54	; 84
 204:	e9 9f       	mul	r30, r25
 206:	f0 01       	movw	r30, r0
 208:	11 24       	eor	r1, r1
 20a:	e8 55       	subi	r30, 0x58	; 88
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	e8 0f       	add	r30, r24
 210:	f1 1d       	adc	r31, r1
 212:	80 81       	ld	r24, Z
 214:	28 2b       	or	r18, r24
 216:	20 83       	st	Z, r18
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 218:	2e bd       	out	0x2e, r18	; 46

	//If DC is high, pull the pin high
	if(dc)
	{
		PORT_SPI |= (PORT_DC);
 21a:	29 9a       	sbi	0x05, 1	; 5
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 21c:	0d b4       	in	r0, 0x2d	; 45
 21e:	07 fe       	sbrs	r0, 7
 220:	fd cf       	rjmp	.-6      	; 0x21c <set_pixel+0x3c>

	//Pull DC low again if it was set high
	if(dc)
	{
		PORT_SPI &= ~(PORT_DC);
 222:	29 98       	cbi	0x05, 1	; 5
 224:	08 95       	ret

	//If setting it white, mask and bitwise and
	else
	{
		flag = ~flag;
		fbuff[i][x] = fbuff[i][x] & flag;
 226:	20 95       	com	r18
 228:	94 e5       	ldi	r25, 0x54	; 84
 22a:	e9 9f       	mul	r30, r25
 22c:	f0 01       	movw	r30, r0
 22e:	11 24       	eor	r1, r1
 230:	e8 55       	subi	r30, 0x58	; 88
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	e8 0f       	add	r30, r24
 236:	f1 1d       	adc	r31, r1
 238:	80 81       	ld	r24, Z
 23a:	28 23       	and	r18, r24
 23c:	20 83       	st	Z, r18
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 23e:	2e bd       	out	0x2e, r18	; 46

	//If DC is high, pull the pin high
	if(dc)
	{
		PORT_SPI |= (PORT_DC);
 240:	29 9a       	sbi	0x05, 1	; 5
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 242:	0d b4       	in	r0, 0x2d	; 45
 244:	07 fe       	sbrs	r0, 7
 246:	fd cf       	rjmp	.-6      	; 0x242 <set_pixel+0x62>

	//Pull DC low again if it was set high
	if(dc)
	{
		PORT_SPI &= ~(PORT_DC);
 248:	29 98       	cbi	0x05, 1	; 5
 24a:	ec cf       	rjmp	.-40     	; 0x224 <set_pixel+0x44>

0000024c <blank_display>:
		send_byte(fbuff[i][x], DATA);
	}
}

void blank_display()
{
 24c:	89 ef       	ldi	r24, 0xF9	; 249
 24e:	91 e0       	ldi	r25, 0x01	; 1
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 250:	1e bc       	out	0x2e, r1	; 46

	//If DC is high, pull the pin high
	if(dc)
	{
		PORT_SPI |= (PORT_DC);
 252:	29 9a       	sbi	0x05, 1	; 5
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 254:	0d b4       	in	r0, 0x2d	; 45
 256:	07 fe       	sbrs	r0, 7
 258:	fd cf       	rjmp	.-6      	; 0x254 <blank_display+0x8>

	//Pull DC low again if it was set high
	if(dc)
	{
		PORT_SPI &= ~(PORT_DC);
 25a:	29 98       	cbi	0x05, 1	; 5
 25c:	01 97       	sbiw	r24, 0x01	; 1
	do 
	{
		send_byte(0, DATA);
		--i;

	} while (i);
 25e:	c1 f7       	brne	.-16     	; 0x250 <blank_display+0x4>
}
 260:	08 95       	ret

00000262 <read_pixel>:

//This function can read pixels in the spritemap or fbuff
bool read_pixel(uint8_t x, uint8_t y, uint8_t arr[][84])
{
	//Which byte to check
	uint8_t i = y/8;
 262:	96 2f       	mov	r25, r22
 264:	96 95       	lsr	r25
 266:	96 95       	lsr	r25
 268:	96 95       	lsr	r25
	uint8_t flag = 0x01;
	flag = flag << pos;

	//If there is a bit at that position, this will return true (pixel is black).
	//If there is no bit, this will return false (pixel is white)
	return arr[i][x] & flag;
 26a:	24 e5       	ldi	r18, 0x54	; 84
 26c:	92 9f       	mul	r25, r18
 26e:	40 0d       	add	r20, r0
 270:	51 1d       	adc	r21, r1
 272:	11 24       	eor	r1, r1
 274:	fa 01       	movw	r30, r20
 276:	e8 0f       	add	r30, r24
 278:	f1 1d       	adc	r31, r1
 27a:	67 70       	andi	r22, 0x07	; 7
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	01 c0       	rjmp	.+2      	; 0x284 <read_pixel+0x22>
 282:	88 0f       	add	r24, r24
 284:	6a 95       	dec	r22
 286:	ea f7       	brpl	.-6      	; 0x282 <read_pixel+0x20>
 288:	90 81       	ld	r25, Z
 28a:	98 23       	and	r25, r24
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	09 f4       	brne	.+2      	; 0x292 <read_pixel+0x30>
 290:	80 e0       	ldi	r24, 0x00	; 0
}
 292:	08 95       	ret

00000294 <clear_sprite>:

//Remove the sprite from the screen
void clear_sprite(struct sprite* spr)
{
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	dc 01       	movw	r26, r24
	for(uint8_t y = 0; y < spr->hght; y++)
 29a:	17 96       	adiw	r26, 0x07	; 7
 29c:	8c 91       	ld	r24, X
 29e:	17 97       	sbiw	r26, 0x07	; 7
 2a0:	88 23       	and	r24, r24
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <clear_sprite+0x12>
 2a4:	5b c0       	rjmp	.+182    	; 0x35c <clear_sprite+0xc8>
 2a6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t flag = 0x01;
	flag = flag << pos;

	//If there is a bit at that position, this will return true (pixel is black).
	//If there is no bit, this will return false (pixel is white)
	return arr[i][x] & flag;
 2a8:	64 e5       	ldi	r22, 0x54	; 84
	{
		set_ddram_y_addr(((spr->y_ppos + y)/8));
		for(uint8_t x = 0; x < spr->wdth; x++)
		{
			set_ddram_x_addr(spr->x_ppos + x);
			if(read_pixel(spr->x_map + x, spr->y_map + y, spritemap))
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	50 e0       	ldi	r21, 0x00	; 0

//Sets the y address in the screen's ddram. Note that this takes the address of the 
//BYTE of ddram you want to modify, not the index of the pixel you want to modify.
void set_ddram_y_addr(uint8_t y)
{
	send_byte((y | 0b01000000), COMM);
 2ae:	15 96       	adiw	r26, 0x05	; 5
 2b0:	2c 91       	ld	r18, X
 2b2:	15 97       	sbiw	r26, 0x05	; 5
 2b4:	83 2f       	mov	r24, r19
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	82 0f       	add	r24, r18
 2ba:	91 1d       	adc	r25, r1
 2bc:	95 95       	asr	r25
 2be:	87 95       	ror	r24
 2c0:	95 95       	asr	r25
 2c2:	87 95       	ror	r24
 2c4:	95 95       	asr	r25
 2c6:	87 95       	ror	r24
 2c8:	80 64       	ori	r24, 0x40	; 64
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 2ca:	8e bd       	out	0x2e, r24	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 2cc:	0d b4       	in	r0, 0x2d	; 45
 2ce:	07 fe       	sbrs	r0, 7
 2d0:	fd cf       	rjmp	.-6      	; 0x2cc <clear_sprite+0x38>
void clear_sprite(struct sprite* spr)
{
	for(uint8_t y = 0; y < spr->hght; y++)
	{
		set_ddram_y_addr(((spr->y_ppos + y)/8));
		for(uint8_t x = 0; x < spr->wdth; x++)
 2d2:	16 96       	adiw	r26, 0x06	; 6
 2d4:	8c 91       	ld	r24, X
 2d6:	16 97       	sbiw	r26, 0x06	; 6
 2d8:	88 23       	and	r24, r24
 2da:	c9 f1       	breq	.+114    	; 0x34e <clear_sprite+0xba>
 2dc:	20 e0       	ldi	r18, 0x00	; 0
}

//Sets the x address in the screen's ddram
void set_ddram_x_addr(uint8_t x)
{
	send_byte((x | 0b10000000), COMM);
 2de:	14 96       	adiw	r26, 0x04	; 4
 2e0:	9c 91       	ld	r25, X
 2e2:	14 97       	sbiw	r26, 0x04	; 4
 2e4:	92 0f       	add	r25, r18
 2e6:	90 68       	ori	r25, 0x80	; 128
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 2e8:	9e bd       	out	0x2e, r25	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 2ea:	0d b4       	in	r0, 0x2d	; 45
 2ec:	07 fe       	sbrs	r0, 7
 2ee:	fd cf       	rjmp	.-6      	; 0x2ea <clear_sprite+0x56>
	{
		set_ddram_y_addr(((spr->y_ppos + y)/8));
		for(uint8_t x = 0; x < spr->wdth; x++)
		{
			set_ddram_x_addr(spr->x_ppos + x);
			if(read_pixel(spr->x_map + x, spr->y_map + y, spritemap))
 2f0:	11 96       	adiw	r26, 0x01	; 1
 2f2:	9c 91       	ld	r25, X
 2f4:	11 97       	sbiw	r26, 0x01	; 1
 2f6:	93 0f       	add	r25, r19

//This function can read pixels in the spritemap or fbuff
bool read_pixel(uint8_t x, uint8_t y, uint8_t arr[][84])
{
	//Which byte to check
	uint8_t i = y/8;
 2f8:	e9 2f       	mov	r30, r25
 2fa:	e6 95       	lsr	r30
 2fc:	e6 95       	lsr	r30
 2fe:	e6 95       	lsr	r30
	uint8_t flag = 0x01;
	flag = flag << pos;

	//If there is a bit at that position, this will return true (pixel is black).
	//If there is no bit, this will return false (pixel is white)
	return arr[i][x] & flag;
 300:	84 e5       	ldi	r24, 0x54	; 84
 302:	e8 9f       	mul	r30, r24
 304:	f0 01       	movw	r30, r0
 306:	11 24       	eor	r1, r1
 308:	e0 50       	subi	r30, 0x00	; 0
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	8c 91       	ld	r24, X
 30e:	82 0f       	add	r24, r18
 310:	e8 0f       	add	r30, r24
 312:	f1 1d       	adc	r31, r1
	{
		set_ddram_y_addr(((spr->y_ppos + y)/8));
		for(uint8_t x = 0; x < spr->wdth; x++)
		{
			set_ddram_x_addr(spr->x_ppos + x);
			if(read_pixel(spr->x_map + x, spr->y_map + y, spritemap))
 314:	97 70       	andi	r25, 0x07	; 7
 316:	ea 01       	movw	r28, r20
 318:	02 c0       	rjmp	.+4      	; 0x31e <clear_sprite+0x8a>
 31a:	cc 0f       	add	r28, r28
 31c:	dd 1f       	adc	r29, r29
 31e:	9a 95       	dec	r25
 320:	e2 f7       	brpl	.-8      	; 0x31a <clear_sprite+0x86>
 322:	ce 01       	movw	r24, r28
 324:	90 81       	ld	r25, Z
 326:	89 23       	and	r24, r25
 328:	61 f0       	breq	.+24     	; 0x342 <clear_sprite+0xae>
			{
				set_pixel(spr->x_ppos + x, spr->y_ppos + y, WHITE);
 32a:	14 96       	adiw	r26, 0x04	; 4
 32c:	8c 91       	ld	r24, X
 32e:	14 97       	sbiw	r26, 0x04	; 4
 330:	82 0f       	add	r24, r18
//buffer and sending the whole buffer to the screen, this function only changes
//the necessary pixels on the display. Note that the x and y address of the current
void set_pixel(uint8_t x, uint8_t y, bool color)
{
	//if out of bounds
	if(x > 83 || y > 47)
 332:	84 35       	cpi	r24, 0x54	; 84
 334:	30 f4       	brcc	.+12     	; 0x342 <clear_sprite+0xae>
		for(uint8_t x = 0; x < spr->wdth; x++)
		{
			set_ddram_x_addr(spr->x_ppos + x);
			if(read_pixel(spr->x_map + x, spr->y_map + y, spritemap))
			{
				set_pixel(spr->x_ppos + x, spr->y_ppos + y, WHITE);
 336:	15 96       	adiw	r26, 0x05	; 5
 338:	ec 91       	ld	r30, X
 33a:	15 97       	sbiw	r26, 0x05	; 5
 33c:	e3 0f       	add	r30, r19
//buffer and sending the whole buffer to the screen, this function only changes
//the necessary pixels on the display. Note that the x and y address of the current
void set_pixel(uint8_t x, uint8_t y, bool color)
{
	//if out of bounds
	if(x > 83 || y > 47)
 33e:	e0 33       	cpi	r30, 0x30	; 48
 340:	80 f0       	brcs	.+32     	; 0x362 <clear_sprite+0xce>
void clear_sprite(struct sprite* spr)
{
	for(uint8_t y = 0; y < spr->hght; y++)
	{
		set_ddram_y_addr(((spr->y_ppos + y)/8));
		for(uint8_t x = 0; x < spr->wdth; x++)
 342:	2f 5f       	subi	r18, 0xFF	; 255
 344:	16 96       	adiw	r26, 0x06	; 6
 346:	8c 91       	ld	r24, X
 348:	16 97       	sbiw	r26, 0x06	; 6
 34a:	28 17       	cp	r18, r24
 34c:	40 f2       	brcs	.-112    	; 0x2de <clear_sprite+0x4a>
}

//Remove the sprite from the screen
void clear_sprite(struct sprite* spr)
{
	for(uint8_t y = 0; y < spr->hght; y++)
 34e:	3f 5f       	subi	r19, 0xFF	; 255
 350:	17 96       	adiw	r26, 0x07	; 7
 352:	8c 91       	ld	r24, X
 354:	17 97       	sbiw	r26, 0x07	; 7
 356:	38 17       	cp	r19, r24
 358:	08 f4       	brcc	.+2      	; 0x35c <clear_sprite+0xc8>
 35a:	a9 cf       	rjmp	.-174    	; 0x2ae <clear_sprite+0x1a>
			{
				set_pixel(spr->x_ppos + x, spr->y_ppos + y, WHITE);
			}
		}
	}
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret
	uint8_t i = y/8;
	//Which bit in the byte to manipulate
	uint8_t pos = y%8;
	//Positioning the byte for masking or oring
	uint8_t flag = 0x01;
	flag = flag << pos;
 362:	9e 2f       	mov	r25, r30
 364:	97 70       	andi	r25, 0x07	; 7
 366:	ea 01       	movw	r28, r20
 368:	01 c0       	rjmp	.+2      	; 0x36c <clear_sprite+0xd8>
 36a:	cc 0f       	add	r28, r28
 36c:	9a 95       	dec	r25
 36e:	ea f7       	brpl	.-6      	; 0x36a <clear_sprite+0xd6>

	//If setting it white, mask and bitwise and
	else
	{
		flag = ~flag;
		fbuff[i][x] = fbuff[i][x] & flag;
 370:	e6 95       	lsr	r30
 372:	e6 95       	lsr	r30
 374:	e6 95       	lsr	r30
 376:	c0 95       	com	r28
 378:	6e 9f       	mul	r22, r30
 37a:	f0 01       	movw	r30, r0
 37c:	11 24       	eor	r1, r1
 37e:	e8 55       	subi	r30, 0x58	; 88
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	e8 0f       	add	r30, r24
 384:	f1 1d       	adc	r31, r1
 386:	80 81       	ld	r24, Z
 388:	8c 23       	and	r24, r28
 38a:	80 83       	st	Z, r24
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 38c:	8e bd       	out	0x2e, r24	; 46

	//If DC is high, pull the pin high
	if(dc)
	{
		PORT_SPI |= (PORT_DC);
 38e:	29 9a       	sbi	0x05, 1	; 5
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 390:	0d b4       	in	r0, 0x2d	; 45
 392:	07 fe       	sbrs	r0, 7
 394:	fd cf       	rjmp	.-6      	; 0x390 <clear_sprite+0xfc>

	//Pull DC low again if it was set high
	if(dc)
	{
		PORT_SPI &= ~(PORT_DC);
 396:	29 98       	cbi	0x05, 1	; 5
 398:	d4 cf       	rjmp	.-88     	; 0x342 <clear_sprite+0xae>

0000039a <draw_sprite>:
		}
	}
}

void draw_sprite(struct sprite* spr)
{
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	ec 01       	movw	r28, r24
	clear_sprite(spr);
 3a0:	0e 94 4a 01 	call	0x294	; 0x294 <clear_sprite>
	for(uint8_t y = 0; y < spr->hght; y++)
 3a4:	8f 81       	ldd	r24, Y+7	; 0x07
 3a6:	88 23       	and	r24, r24
 3a8:	09 f4       	brne	.+2      	; 0x3ac <draw_sprite+0x12>
 3aa:	49 c0       	rjmp	.+146    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3ac:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t flag = 0x01;
	flag = flag << pos;

	//If there is a bit at that position, this will return true (pixel is black).
	//If there is no bit, this will return false (pixel is white)
	return arr[i][x] & flag;
 3ae:	74 e5       	ldi	r23, 0x54	; 84
	{
		set_ddram_y_addr(((spr->y_pos + y)/8));
		for(uint8_t x = 0; x < spr->wdth; x++)
		{
			set_ddram_x_addr(spr->x_pos + x);
			if(read_pixel(spr->x_map + x, spr->y_map + y, spritemap))
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0

//Sets the y address in the screen's ddram. Note that this takes the address of the 
//BYTE of ddram you want to modify, not the index of the pixel you want to modify.
void set_ddram_y_addr(uint8_t y)
{
	send_byte((y | 0b01000000), COMM);
 3b4:	4b 81       	ldd	r20, Y+3	; 0x03
 3b6:	86 2f       	mov	r24, r22
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	84 0f       	add	r24, r20
 3bc:	91 1d       	adc	r25, r1
 3be:	95 95       	asr	r25
 3c0:	87 95       	ror	r24
 3c2:	95 95       	asr	r25
 3c4:	87 95       	ror	r24
 3c6:	95 95       	asr	r25
 3c8:	87 95       	ror	r24
 3ca:	80 64       	ori	r24, 0x40	; 64
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 3cc:	8e bd       	out	0x2e, r24	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 3ce:	0d b4       	in	r0, 0x2d	; 45
 3d0:	07 fe       	sbrs	r0, 7
 3d2:	fd cf       	rjmp	.-6      	; 0x3ce <draw_sprite+0x34>
{
	clear_sprite(spr);
	for(uint8_t y = 0; y < spr->hght; y++)
	{
		set_ddram_y_addr(((spr->y_pos + y)/8));
		for(uint8_t x = 0; x < spr->wdth; x++)
 3d4:	8e 81       	ldd	r24, Y+6	; 0x06
 3d6:	88 23       	and	r24, r24
 3d8:	69 f1       	breq	.+90     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3da:	90 e0       	ldi	r25, 0x00	; 0
}

//Sets the x address in the screen's ddram
void set_ddram_x_addr(uint8_t x)
{
	send_byte((x | 0b10000000), COMM);
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	89 0f       	add	r24, r25
 3e0:	80 68       	ori	r24, 0x80	; 128
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 3e2:	8e bd       	out	0x2e, r24	; 46
	{
		PORT_SPI |= (PORT_DC);
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 3e4:	0d b4       	in	r0, 0x2d	; 45
 3e6:	07 fe       	sbrs	r0, 7
 3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <draw_sprite+0x4a>
	{
		set_ddram_y_addr(((spr->y_pos + y)/8));
		for(uint8_t x = 0; x < spr->wdth; x++)
		{
			set_ddram_x_addr(spr->x_pos + x);
			if(read_pixel(spr->x_map + x, spr->y_map + y, spritemap))
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	86 0f       	add	r24, r22

//This function can read pixels in the spritemap or fbuff
bool read_pixel(uint8_t x, uint8_t y, uint8_t arr[][84])
{
	//Which byte to check
	uint8_t i = y/8;
 3ee:	e8 2f       	mov	r30, r24
 3f0:	e6 95       	lsr	r30
 3f2:	e6 95       	lsr	r30
 3f4:	e6 95       	lsr	r30
	uint8_t flag = 0x01;
	flag = flag << pos;

	//If there is a bit at that position, this will return true (pixel is black).
	//If there is no bit, this will return false (pixel is white)
	return arr[i][x] & flag;
 3f6:	44 e5       	ldi	r20, 0x54	; 84
 3f8:	e4 9f       	mul	r30, r20
 3fa:	f0 01       	movw	r30, r0
 3fc:	11 24       	eor	r1, r1
 3fe:	e0 50       	subi	r30, 0x00	; 0
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	48 81       	ld	r20, Y
 404:	49 0f       	add	r20, r25
 406:	e4 0f       	add	r30, r20
 408:	f1 1d       	adc	r31, r1
	{
		set_ddram_y_addr(((spr->y_pos + y)/8));
		for(uint8_t x = 0; x < spr->wdth; x++)
		{
			set_ddram_x_addr(spr->x_pos + x);
			if(read_pixel(spr->x_map + x, spr->y_map + y, spritemap))
 40a:	87 70       	andi	r24, 0x07	; 7
 40c:	a9 01       	movw	r20, r18
 40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	44 0f       	add	r20, r20
 412:	8a 95       	dec	r24
 414:	ea f7       	brpl	.-6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 416:	80 81       	ld	r24, Z
 418:	48 23       	and	r20, r24
 41a:	41 f0       	breq	.+16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			{
				set_pixel(spr->x_pos + x, spr->y_pos + y, BLACK);
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	89 0f       	add	r24, r25
//buffer and sending the whole buffer to the screen, this function only changes
//the necessary pixels on the display. Note that the x and y address of the current
void set_pixel(uint8_t x, uint8_t y, bool color)
{
	//if out of bounds
	if(x > 83 || y > 47)
 420:	84 35       	cpi	r24, 0x54	; 84
 422:	20 f4       	brcc	.+8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		for(uint8_t x = 0; x < spr->wdth; x++)
		{
			set_ddram_x_addr(spr->x_pos + x);
			if(read_pixel(spr->x_map + x, spr->y_map + y, spritemap))
			{
				set_pixel(spr->x_pos + x, spr->y_pos + y, BLACK);
 424:	4b 81       	ldd	r20, Y+3	; 0x03
 426:	46 0f       	add	r20, r22
//buffer and sending the whole buffer to the screen, this function only changes
//the necessary pixels on the display. Note that the x and y address of the current
void set_pixel(uint8_t x, uint8_t y, bool color)
{
	//if out of bounds
	if(x > 83 || y > 47)
 428:	40 33       	cpi	r20, 0x30	; 48
 42a:	90 f0       	brcs	.+36     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
{
	clear_sprite(spr);
	for(uint8_t y = 0; y < spr->hght; y++)
	{
		set_ddram_y_addr(((spr->y_pos + y)/8));
		for(uint8_t x = 0; x < spr->wdth; x++)
 42c:	9f 5f       	subi	r25, 0xFF	; 255
 42e:	8e 81       	ldd	r24, Y+6	; 0x06
 430:	98 17       	cp	r25, r24
 432:	a0 f2       	brcs	.-88     	; 0x3dc <draw_sprite+0x42>
}

void draw_sprite(struct sprite* spr)
{
	clear_sprite(spr);
	for(uint8_t y = 0; y < spr->hght; y++)
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	8f 81       	ldd	r24, Y+7	; 0x07
 438:	68 17       	cp	r22, r24
 43a:	08 f4       	brcc	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	bb cf       	rjmp	.-138    	; 0x3b4 <draw_sprite+0x1a>
			//{
			//	set_pixel(spr->x_pos + x, spr->y_pos + y, WHITE);
			//}
		}
	}
	spr->x_ppos = spr->x_pos;
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	8c 83       	std	Y+4, r24	; 0x04
	spr->y_ppos = spr->y_pos;
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	8d 83       	std	Y+5, r24	; 0x05
	//Check to see if the sprite is now colliding with something
	check_collision(spr);
 446:	ce 01       	movw	r24, r28

}
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
		}
	}
	spr->x_ppos = spr->x_pos;
	spr->y_ppos = spr->y_pos;
	//Check to see if the sprite is now colliding with something
	check_collision(spr);
 44c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <check_collision>

	//If setting it black, bitwise or
	if(color)
	{
		//write the changes to the internal fbuff
		fbuff[i][x] = fbuff[i][x] | flag;
 450:	e4 2f       	mov	r30, r20
 452:	e6 95       	lsr	r30
 454:	e6 95       	lsr	r30
 456:	e6 95       	lsr	r30
 458:	47 70       	andi	r20, 0x07	; 7
 45a:	d9 01       	movw	r26, r18
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45e:	aa 0f       	add	r26, r26
 460:	bb 1f       	adc	r27, r27
 462:	4a 95       	dec	r20
 464:	e2 f7       	brpl	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 466:	ad 01       	movw	r20, r26
 468:	7e 9f       	mul	r23, r30
 46a:	f0 01       	movw	r30, r0
 46c:	11 24       	eor	r1, r1
 46e:	e8 55       	subi	r30, 0x58	; 88
 470:	fe 4f       	sbci	r31, 0xFE	; 254
 472:	e8 0f       	add	r30, r24
 474:	f1 1d       	adc	r31, r1
 476:	80 81       	ld	r24, Z
 478:	48 2b       	or	r20, r24
 47a:	40 83       	st	Z, r20
uint8_t spritemap[2][84] = {0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa8, 0xee, 0x00, 0xae, 0xa2, 0xee, 0xa2, 0xae, 0x00, 0xea, 0x4a, 0x4e, 0x42, 0xe2, 0x00, 0x2e, 0x28, 0x2e, 0xa2, 0x6e, 0x00, 0xae, 0xa8, 0xce, 0xaa, 0xae, 0x00, 0x8e, 0x82, 0x82, 0x82, 0xe2, 0x00, 0xae, 0xea, 0xee, 0xaa, 0xae, 0x00, 0xae, 0xea, 0xee, 0xe2, 0xae, 0x00, 0x44, 0xaa, 0xae, 0xaa, 0x4a, 0x00, 0xcc, 0xaa, 0xec, 0x8a, 0x8e, 0x00, 0x46, 0xa8, 0xa8, 0xe8, 0x6e, 0x00, 0xcc, 0xaa, 0xea, 0xca, 0xae, 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xaa, 0x46, 0x00, 0xaa, 0x4a, 0xea, 0x44, 0xa4, 0x00, 0x0a, 0x0a, 0x0e, 0x0e, 0x4a, 0x00, 0x4a, 0x4a, 0x04, 0x0a, 0x0a, 0x00, 0xea, 0xea, 0xe4, 0xe4, 0xe4, 0x00, 0x0e, 0x02, 0x04, 0x08, 0x0e, 0x00, 0x06, 0x06, 0x1e, 0x1e, 0x18, 0x18, 0x00, 0x18, 0x18, 0x1e, 0x1e, 0x06, 0x06, 0xc0, 0xc6, 0xf6, 0xf6, 0xc6, 0xc6, 0x06, 0xc6, 0xc6, 0xc0, 0xc6, 0xf6, 0xf6, 0x06, 0x1e, 0x1e, 0x00, 0x1e, 0x1e, 0x1e, 0x1e, 0x00, };

void send_byte(uint8_t data, bool dc)
{
	// Load data into the buffer
	SPDR = data;
 47c:	4e bd       	out	0x2e, r20	; 46

	//If DC is high, pull the pin high
	if(dc)
	{
		PORT_SPI |= (PORT_DC);
 47e:	29 9a       	sbi	0x05, 1	; 5
	}

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 480:	0d b4       	in	r0, 0x2d	; 45
 482:	07 fe       	sbrs	r0, 7
 484:	fd cf       	rjmp	.-6      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>

	//Pull DC low again if it was set high
	if(dc)
	{
		PORT_SPI &= ~(PORT_DC);
 486:	29 98       	cbi	0x05, 1	; 5
 488:	d1 cf       	rjmp	.-94     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

0000048a <main>:
#include <stdint.h>

#include "game.h"

int main(void)
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	29 97       	sbiw	r28, 0x09	; 9
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
	struct sprite tmino;
	tmino.x_map = 49;
 49e:	81 e3       	ldi	r24, 0x31	; 49
 4a0:	89 83       	std	Y+1, r24	; 0x01
	tmino.y_map = 9;
 4a2:	89 e0       	ldi	r24, 0x09	; 9
 4a4:	8a 83       	std	Y+2, r24	; 0x02
	tmino.x_pos = 15;
 4a6:	8f e0       	ldi	r24, 0x0F	; 15
 4a8:	8b 83       	std	Y+3, r24	; 0x03
	tmino.y_pos = 0;
 4aa:	1c 82       	std	Y+4, r1	; 0x04
	tmino.x_ppos = 15;
 4ac:	8d 83       	std	Y+5, r24	; 0x05
	tmino.y_ppos = 0;
 4ae:	1e 82       	std	Y+6, r1	; 0x06
	tmino.wdth = 6;
 4b0:	86 e0       	ldi	r24, 0x06	; 6
 4b2:	8f 83       	std	Y+7, r24	; 0x07
	tmino.hght = 4;
 4b4:	84 e0       	ldi	r24, 0x04	; 4
 4b6:	88 87       	std	Y+8, r24	; 0x08
	sjsu.str = sjsu_s;
	sjsu.x_pos = 6;
	sjsu.y_pos = 48;
*/
	//Initialize the SPI bus
	spi_init_master();
 4b8:	0e 94 9d 02 	call	0x53a	; 0x53a <spi_init_master>
	//Initialize the screen
	init_screen();
 4bc:	0e 94 bf 00 	call	0x17e	; 0x17e <init_screen>
	blank_display();
 4c0:	0e 94 26 01 	call	0x24c	; 0x24c <blank_display>
	//draw a test pattern
	set_ddram_x_addr(10);
 4c4:	8a e0       	ldi	r24, 0x0A	; 10
 4c6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <set_ddram_x_addr>
	set_ddram_y_addr(0/8);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <set_ddram_y_addr>
	set_pixel(10, 2, BLACK);
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	62 e0       	ldi	r22, 0x02	; 2
 4d4:	8a e0       	ldi	r24, 0x0A	; 10
 4d6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <set_pixel>
	set_pixel(10, 3, BLACK);
 4da:	41 e0       	ldi	r20, 0x01	; 1
 4dc:	63 e0       	ldi	r22, 0x03	; 3
 4de:	8a e0       	ldi	r24, 0x0A	; 10
 4e0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <set_pixel>
	set_pixel(10, 4, BLACK);
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	64 e0       	ldi	r22, 0x04	; 4
 4e8:	8a e0       	ldi	r24, 0x0A	; 10
 4ea:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <set_pixel>
 4ee:	0c c0       	rjmp	.+24     	; 0x508 <main+0x7e>
	//draw_string(&tetris);
	//draw_string(&sjsu);
	//_delay_ms(10);
	while(!(tmino.coll & 0b00001000))
	{
		tmino.x_pos--;
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	81 50       	subi	r24, 0x01	; 1
 4f4:	8b 83       	std	Y+3, r24	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f6:	2f ef       	ldi	r18, 0xFF	; 255
 4f8:	80 e7       	ldi	r24, 0x70	; 112
 4fa:	92 e0       	ldi	r25, 0x02	; 2
 4fc:	21 50       	subi	r18, 0x01	; 1
 4fe:	80 40       	sbci	r24, 0x00	; 0
 500:	90 40       	sbci	r25, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <main+0x72>
 504:	00 c0       	rjmp	.+0      	; 0x506 <main+0x7c>
 506:	00 00       	nop
	set_ddram_x_addr(10);
	set_ddram_y_addr(0/8);
	set_pixel(10, 2, BLACK);
	set_pixel(10, 3, BLACK);
	set_pixel(10, 4, BLACK);
	draw_sprite(&tmino);
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	0e 94 cd 01 	call	0x39a	; 0x39a <draw_sprite>
	//draw_string(&tetris);
	//draw_string(&sjsu);
	//_delay_ms(10);
	while(!(tmino.coll & 0b00001000))
 510:	89 85       	ldd	r24, Y+9	; 0x09
 512:	83 ff       	sbrs	r24, 3
 514:	ed cf       	rjmp	.-38     	; 0x4f0 <main+0x66>
		tmino.x_pos--;
		_delay_ms(50);
		draw_sprite(&tmino);
	}
	//End execution of code
	sleep_mode();
 516:	83 b7       	in	r24, 0x33	; 51
 518:	81 60       	ori	r24, 0x01	; 1
 51a:	83 bf       	out	0x33, r24	; 51
 51c:	88 95       	sleep
 51e:	83 b7       	in	r24, 0x33	; 51
 520:	8e 7f       	andi	r24, 0xFE	; 254
 522:	83 bf       	out	0x33, r24	; 51
	return(0);
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	29 96       	adiw	r28, 0x09	; 9
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <spi_init_master>:

// Initialize SPI Master Device (with SPI interrupt)
void spi_init_master (void)
{
	// Set MOSI, SCK, SS as Output
	DDR_SPI=(1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
 53a:	8c e2       	ldi	r24, 0x2C	; 44
 53c:	84 b9       	out	0x04, r24	; 4

	// Enable SPI, Set as Master
	// Prescaler: Fosc/16, Enable Interrupts
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 53e:	81 e5       	ldi	r24, 0x51	; 81
 540:	8c bd       	out	0x2c, r24	; 44
 542:	08 95       	ret

00000544 <_exit>:
 544:	f8 94       	cli

00000546 <__stop_program>:
 546:	ff cf       	rjmp	.-2      	; 0x546 <__stop_program>
