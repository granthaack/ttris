   1               		.file	"ttris.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/granthaack/Documents/ttris/",100,0,4,.Ltext0
   8               		.stabs	"ttris.cpp",100,0,4,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"__uint24:t(0,1)=@s24;r(0,1);0;077777777;",128,0,0,0
  13               		.stabs	"__int24:t(0,2)=@s24;r(0,2);040000000;037777777;",128,0,0,0
  14               		.stabs	"__builtin_va_list:t(0,3)=*(0,4)=(0,4)",128,0,0,0
  15               		.stabs	"complex long double:t(0,5)=R3;8;0;",128,0,0,0
  16               		.stabs	"complex double:t(0,6)=R3;8;0;",128,0,0,0
  17               		.stabs	"complex float:t(0,7)=R3;8;0;",128,0,0,0
  18               		.stabs	"complex int:t(0,8)=s4real:(0,9)=r(0,9);-32768;32767;,0,16;imag:(0,9),16,16;;",128,0,0,0
  19               		.stabs	"long long unsigned int:t(0,10)=@s64;r(0,10);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"long unsigned int:t(0,11)=@s32;r(0,11);0;037777777777;",128,0,0,0
  21               		.stabs	"unsigned int:t(0,12)=r(0,12);0;0177777;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  23               		.stabs	"long long int:t(0,14)=@s64;r(0,14);01000000000000000000000;0777777777777777777777;",128,0,
  24               		.stabs	"long int:t(0,15)=@s32;r(0,15);020000000000;017777777777;",128,0,0,0
  25               		.stabs	"int:t(0,9)",128,0,0,0
  26               		.stabs	"signed char:t(0,16)=@s8;r(0,16);-128;127;",128,0,0,0
  27               		.stabs	"char:t(0,17)=r(0,17);0;127;",128,0,0,0
  28               		.stabs	"signed:t(0,9)",128,0,0,0
  29               		.stabs	"unsigned long:t(0,11)",128,0,0,0
  30               		.stabs	"long long unsigned:t(0,10)",128,0,0,0
  31               		.stabs	"short int:t(0,18)=r(0,18);-32768;32767;",128,0,0,0
  32               		.stabs	"short unsigned int:t(0,19)=r(0,19);0;0177777;",128,0,0,0
  33               		.stabs	"unsigned short:t(0,19)",128,0,0,0
  34               		.stabs	"float:t(0,20)=r(0,9);4;0;",128,0,0,0
  35               		.stabs	"double:t(0,21)=r(0,9);4;0;",128,0,0,0
  36               		.stabs	"long double:t(0,22)=r(0,9);4;0;",128,0,0,0
  37               		.stabs	"short _Fract:t(0,23)=r(0,9);1;0;",128,0,0,0
  38               		.stabs	"long _Fract:t(0,24)=r(0,9);4;0;",128,0,0,0
  39               		.stabs	"long long _Fract:t(0,25)=r(0,9);8;0;",128,0,0,0
  40               		.stabs	"unsigned short _Fract:t(0,26)=r(0,9);1;0;",128,0,0,0
  41               		.stabs	"unsigned _Fract:t(0,27)=r(0,9);2;0;",128,0,0,0
  42               		.stabs	"unsigned long _Fract:t(0,28)=r(0,9);4;0;",128,0,0,0
  43               		.stabs	"unsigned long long _Fract:t(0,29)=r(0,9);8;0;",128,0,0,0
  44               		.stabs	"_Sat short _Fract:t(0,30)=r(0,9);1;0;",128,0,0,0
  45               		.stabs	"_Sat _Fract:t(0,31)=r(0,9);2;0;",128,0,0,0
  46               		.stabs	"_Sat long _Fract:t(0,32)=r(0,9);4;0;",128,0,0,0
  47               		.stabs	"_Sat long long _Fract:t(0,33)=r(0,9);8;0;",128,0,0,0
  48               		.stabs	"_Sat unsigned short _Fract:t(0,34)=r(0,9);1;0;",128,0,0,0
  49               		.stabs	"_Sat unsigned _Fract:t(0,35)=r(0,9);2;0;",128,0,0,0
  50               		.stabs	"_Sat unsigned long _Fract:t(0,36)=r(0,9);4;0;",128,0,0,0
  51               		.stabs	"_Sat unsigned long long _Fract:t(0,37)=r(0,9);8;0;",128,0,0,0
  52               		.stabs	"short _Accum:t(0,38)=r(0,9);2;0;",128,0,0,0
  53               		.stabs	"long _Accum:t(0,39)=r(0,9);8;0;",128,0,0,0
  54               		.stabs	"long long _Accum:t(0,40)=r(0,9);8;0;",128,0,0,0
  55               		.stabs	"unsigned short _Accum:t(0,41)=r(0,9);2;0;",128,0,0,0
  56               		.stabs	"unsigned _Accum:t(0,42)=r(0,9);4;0;",128,0,0,0
  57               		.stabs	"unsigned long _Accum:t(0,43)=r(0,9);8;0;",128,0,0,0
  58               		.stabs	"unsigned long long _Accum:t(0,44)=r(0,9);8;0;",128,0,0,0
  59               		.stabs	"_Sat short _Accum:t(0,45)=r(0,9);2;0;",128,0,0,0
  60               		.stabs	"_Sat _Accum:t(0,46)=r(0,9);4;0;",128,0,0,0
  61               		.stabs	"_Sat long _Accum:t(0,47)=r(0,9);8;0;",128,0,0,0
  62               		.stabs	"_Sat long long _Accum:t(0,48)=r(0,9);8;0;",128,0,0,0
  63               		.stabs	"_Sat unsigned short _Accum:t(0,49)=r(0,9);2;0;",128,0,0,0
  64               		.stabs	"_Sat unsigned _Accum:t(0,50)=r(0,9);4;0;",128,0,0,0
  65               		.stabs	"_Sat unsigned long _Accum:t(0,51)=r(0,9);8;0;",128,0,0,0
  66               		.stabs	"_Sat unsigned long long _Accum:t(0,52)=r(0,9);8;0;",128,0,0,0
  67               		.stabs	"void:t(0,4)",128,0,0,0
  68               		.stabs	"wchar_t:t(0,53)=r(0,53);-32768;32767;",128,0,0,0
  69               		.stabs	"bool:t(0,54)=@s8;-16;",128,0,0,0
  70               		.stabs	"__vtbl_ptr_type:t(0,55)=*(0,56)=f(0,9)",128,0,0,0
  71               		.stabs	"decltype(nullptr):t(0,57)=(0,57)",128,0,0,0
  72               		.stabs	"int8_t:t(0,58)=(0,16)",128,0,121,0
  73               		.stabs	"uint8_t:t(0,59)=(0,13)",128,0,122,0
  74               		.stabs	"int16_t:t(0,60)=(0,9)",128,0,123,0
  75               		.stabs	"uint16_t:t(0,61)=(0,12)",128,0,124,0
  76               		.stabs	"int32_t:t(0,62)=(0,15)",128,0,125,0
  77               		.stabs	"uint32_t:t(0,63)=(0,11)",128,0,126,0
  78               		.stabs	"int64_t:t(0,64)=(0,14)",128,0,128,0
  79               		.stabs	"uint64_t:t(0,65)=(0,10)",128,0,129,0
  80               		.stabs	"intptr_t:t(0,66)=(0,60)",128,0,142,0
  81               		.stabs	"uintptr_t:t(0,67)=(0,61)",128,0,147,0
  82               		.stabs	"int_least8_t:t(0,68)=(0,58)",128,0,159,0
  83               		.stabs	"uint_least8_t:t(0,69)=(0,59)",128,0,164,0
  84               		.stabs	"int_least16_t:t(0,70)=(0,60)",128,0,169,0
  85               		.stabs	"uint_least16_t:t(0,71)=(0,61)",128,0,174,0
  86               		.stabs	"int_least32_t:t(0,72)=(0,62)",128,0,179,0
  87               		.stabs	"uint_least32_t:t(0,73)=(0,63)",128,0,184,0
  88               		.stabs	"int_least64_t:t(0,74)=(0,64)",128,0,192,0
  89               		.stabs	"uint_least64_t:t(0,75)=(0,65)",128,0,199,0
  90               		.stabs	"int_fast8_t:t(0,76)=(0,58)",128,0,213,0
  91               		.stabs	"uint_fast8_t:t(0,77)=(0,59)",128,0,218,0
  92               		.stabs	"int_fast16_t:t(0,78)=(0,60)",128,0,223,0
  93               		.stabs	"uint_fast16_t:t(0,79)=(0,61)",128,0,228,0
  94               		.stabs	"int_fast32_t:t(0,80)=(0,62)",128,0,233,0
  95               		.stabs	"uint_fast32_t:t(0,81)=(0,63)",128,0,238,0
  96               		.stabs	"int_fast64_t:t(0,82)=(0,64)",128,0,246,0
  97               		.stabs	"uint_fast64_t:t(0,83)=(0,65)",128,0,253,0
  98               		.stabs	"intmax_t:t(0,84)=(0,64)",128,0,273,0
  99               		.stabs	"uintmax_t:t(0,85)=(0,65)",128,0,278,0
 100               		.stabs	"int_farptr_t:t(0,86)=(0,62)",128,0,77,0
 101               		.stabs	"uint_farptr_t:t(0,87)=(0,63)",128,0,81,0
 102               		.stabs	"._0:Tt(0,88)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,240,0
 103               		.stabs	"__fuse_t:t(0,88)",128,0,244,0
 104               		.stabs	"byte:t(0,89)=(0,13)",128,0,7,0
 105               		.stabs	"sprite:Tt(0,90)=s12x_origin:(0,9),0,16;y_origin:(0,9),16,16;x_pos:(0,9),32,16;y_pos:(0,9),
 106               		.stabs	"_Z15spi_init_masterv:F(0,4)",36,0,72,_Z15spi_init_masterv
 107               	.global	_Z15spi_init_masterv
 108               		.type	_Z15spi_init_masterv, @function
 109               	_Z15spi_init_masterv:
 110               		.stabd	46,0,0
   1:ttris.cpp     **** #define F_CPU  16000000UL
   2:ttris.cpp     **** 
   3:ttris.cpp     **** #include <avr/io.h>
   4:ttris.cpp     **** #include <util/delay.h>
   5:ttris.cpp     **** #include <avr/interrupt.h>
   6:ttris.cpp     **** 
   7:ttris.cpp     **** typedef unsigned char byte;
   8:ttris.cpp     **** 
   9:ttris.cpp     **** #define HIGH 1
  10:ttris.cpp     **** #define LOW 0
  11:ttris.cpp     **** 
  12:ttris.cpp     **** #define BLACK 1
  13:ttris.cpp     **** #define WHITE 0
  14:ttris.cpp     **** 
  15:ttris.cpp     **** #define DATA 1
  16:ttris.cpp     **** #define COMM 0
  17:ttris.cpp     **** 
  18:ttris.cpp     **** //Define the SPI Pins to communicate with the screen
  19:ttris.cpp     **** //Define the data direction registers
  20:ttris.cpp     **** #define DDR_SPI         DDRB
  21:ttris.cpp     **** #define DD_SCK          DDB5
  22:ttris.cpp     **** #define DD_MISO         DDB4
  23:ttris.cpp     **** #define DD_MOSI         DDB3
  24:ttris.cpp     **** #define DD_SS           DDB2
  25:ttris.cpp     **** #define DD_DC           DDB1
  26:ttris.cpp     **** #define DD_RST          DDB0
  27:ttris.cpp     **** 
  28:ttris.cpp     **** //Define the port registers
  29:ttris.cpp     **** #define PORT_SPI        PORTB
  30:ttris.cpp     **** #define PORT_SCK        (1 << PB5) //yellow
  31:ttris.cpp     **** #define PORT_MISO       (1 << PB4) //green (unused)
  32:ttris.cpp     **** #define PORT_MOSI       (1 << PB3) //white
  33:ttris.cpp     **** #define PORT_SS         (1 << PB2) //orange
  34:ttris.cpp     **** #define PORT_DC         (1 << PB1) //blue
  35:ttris.cpp     **** #define PORT_RST        (1 << PB0) //green
  36:ttris.cpp     **** 
  37:ttris.cpp     **** //Init the frame buffer
  38:ttris.cpp     **** byte fbuff[6][84] = {
  39:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  40:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  41:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  42:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  43:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  44:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  45:ttris.cpp     **** };
  46:ttris.cpp     **** 
  47:ttris.cpp     **** //Init the previous frame buffer. This is used to determine which pixels have
  48:ttris.cpp     **** //changed between frames and only update the affected pixels
  49:ttris.cpp     **** byte pfbuff[6][84] = {
  50:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  51:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  52:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  53:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  54:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  55:ttris.cpp     **** 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
  56:ttris.cpp     **** };
  57:ttris.cpp     **** 
  58:ttris.cpp     **** byte spritemap[2][84] = {
  59:ttris.cpp     **** 0x00, 0x6e, 0x8a, 0xea, 0x8a, 0xee, 0x00, 0x64, 0x84, 0xe4, 0x84, 0x84, 0x00, 0x6e, 0x82, 0xee, 0xa
  60:ttris.cpp     **** 0x00, 0x46, 0x48, 0x44, 0x02, 0x4e, 0x00, 0xee, 0x24, 0x64, 0x04, 0x44, 0x00, 0xaa, 0xaa, 0x0a, 0xa
  61:ttris.cpp     **** 
  62:ttris.cpp     **** struct sprite{
  63:ttris.cpp     ****   int x_origin;
  64:ttris.cpp     ****   int y_origin;
  65:ttris.cpp     ****   int x_pos;
  66:ttris.cpp     ****   int y_pos;
  67:ttris.cpp     ****   int width;
  68:ttris.cpp     ****   int height;
  69:ttris.cpp     **** };
  70:ttris.cpp     **** 
  71:ttris.cpp     **** // Initialize SPI Master Device (with SPI interrupt)
  72:ttris.cpp     **** void spi_init_master (void)
  73:ttris.cpp     **** {
 111               		.stabn	68,0,73,.LM0-.LFBB1
 112               	.LM0:
 113               	.LFBB1:
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 0 */
 117               	.L__stack_usage = 0
  74:ttris.cpp     ****     // Set MOSI, SCK, SS, DC, and RST as Output
  75:ttris.cpp     ****     DDR_SPI=(1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS)|(1<<DD_DC)|(1<<DD_RST);
 118               		.stabn	68,0,75,.LM1-.LFBB1
 119               	.LM1:
 120 0000 8FE2      		ldi r24,lo8(47)
 121 0002 84B9      		out 0x4,r24
  76:ttris.cpp     **** 
  77:ttris.cpp     ****     // Enable SPI, Set as Master
  78:ttris.cpp     ****     // Prescaler: Fosc/16, Enable Interrupts
  79:ttris.cpp     ****     //The MOSI, SCK pins are as per ATMega8
  80:ttris.cpp     ****     SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 122               		.stabn	68,0,80,.LM2-.LFBB1
 123               	.LM2:
 124 0004 81E5      		ldi r24,lo8(81)
 125 0006 8CBD      		out 0x2c,r24
 126 0008 0895      		ret
 127               		.size	_Z15spi_init_masterv, .-_Z15spi_init_masterv
 128               	.Lscope1:
 129               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 130               		.stabd	78,0,0
 131               		.stabs	"_Z9send_bytehb:F(0,4)",36,0,84,_Z9send_bytehb
 132               		.stabs	"data:P(0,89)",64,0,84,24
 133               		.stabs	"dc:P(0,54)",64,0,84,22
 134               	.global	_Z9send_bytehb
 135               		.type	_Z9send_bytehb, @function
 136               	_Z9send_bytehb:
 137               		.stabd	46,0,0
  81:ttris.cpp     **** }
  82:ttris.cpp     **** 
  83:ttris.cpp     **** //Function to send and receive data for both master and slave
  84:ttris.cpp     **** void send_byte(byte data, bool dc)
  85:ttris.cpp     **** {
 138               		.stabn	68,0,85,.LM3-.LFBB2
 139               	.LM3:
 140               	.LFBB2:
 141               	/* prologue: function */
 142               	/* frame size = 0 */
 143               	/* stack size = 0 */
 144               	.L__stack_usage = 0
  86:ttris.cpp     ****     // Load data into the buffer
  87:ttris.cpp     ****     SPDR = data;
 145               		.stabn	68,0,87,.LM4-.LFBB2
 146               	.LM4:
 147 000a 8EBD      		out 0x2e,r24
  88:ttris.cpp     **** 
  89:ttris.cpp     ****     //If DC is high, pull the pin high
  90:ttris.cpp     ****     if(dc)
 148               		.stabn	68,0,90,.LM5-.LFBB2
 149               	.LM5:
 150 000c 6111      		cpse r22,__zero_reg__
  91:ttris.cpp     ****     {
  92:ttris.cpp     ****       PORT_SPI |= (PORT_DC);
 151               		.stabn	68,0,92,.LM6-.LFBB2
 152               	.LM6:
 153 000e 299A      		sbi 0x5,1
 154               	.L4:
  93:ttris.cpp     ****     }
  94:ttris.cpp     **** 
  95:ttris.cpp     ****     //Wait until transmission complete
  96:ttris.cpp     ****     while(!(SPSR & (1<<SPIF)));
 155               		.stabn	68,0,96,.LM7-.LFBB2
 156               	.LM7:
 157 0010 0DB4      		in __tmp_reg__,0x2d
 158 0012 07FE      		sbrs __tmp_reg__,7
 159 0014 00C0      		rjmp .L4
  97:ttris.cpp     **** 
  98:ttris.cpp     ****     //Pull DC low again if it was set high
  99:ttris.cpp     ****     if(dc)
 160               		.stabn	68,0,99,.LM8-.LFBB2
 161               	.LM8:
 162 0016 6111      		cpse r22,__zero_reg__
 163               	.LBB11:
 164               	.LBB12:
 100:ttris.cpp     ****     {
 101:ttris.cpp     ****       PORT_SPI &= ~(PORT_DC);
 165               		.stabn	68,0,101,.LM9-.LFBB2
 166               	.LM9:
 167 0018 2998      		cbi 0x5,1
 168               	.L2:
 169 001a 0895      		ret
 170               	.LBE12:
 171               	.LBE11:
 172               		.size	_Z9send_bytehb, .-_Z9send_bytehb
 173               	.Lscope2:
 174               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 175               		.stabd	78,0,0
 176               		.stabs	"_Z11screen_initv:F(0,4)",36,0,106,_Z11screen_initv
 177               	.global	_Z11screen_initv
 178               		.type	_Z11screen_initv, @function
 179               	_Z11screen_initv:
 180               		.stabd	46,0,0
 102:ttris.cpp     ****     }
 103:ttris.cpp     ****     return;
 104:ttris.cpp     **** }
 105:ttris.cpp     **** 
 106:ttris.cpp     **** void screen_init()
 107:ttris.cpp     **** {
 181               		.stabn	68,0,107,.LM10-.LFBB3
 182               	.LM10:
 183               	.LFBB3:
 184               	/* prologue: function */
 185               	/* frame size = 0 */
 186               	/* stack size = 0 */
 187               	.L__stack_usage = 0
 108:ttris.cpp     ****   /*Enable the screen hardware*/
 109:ttris.cpp     ****   //Toggle the reset pin then set it high
 110:ttris.cpp     ****   PORT_SPI |= (PORT_RST);
 188               		.stabn	68,0,110,.LM11-.LFBB3
 189               	.LM11:
 190 001c 289A      		sbi 0x5,0
 111:ttris.cpp     ****   PORT_SPI &= ~(PORT_RST);
 191               		.stabn	68,0,111,.LM12-.LFBB3
 192               	.LM12:
 193 001e 2898      		cbi 0x5,0
 112:ttris.cpp     ****   PORT_SPI |= (PORT_RST);
 194               		.stabn	68,0,112,.LM13-.LFBB3
 195               	.LM13:
 196 0020 289A      		sbi 0x5,0
 113:ttris.cpp     **** 
 114:ttris.cpp     ****   //send a byte to init function set
 115:ttris.cpp     ****   send_byte(0b00100001, COMM);
 197               		.stabn	68,0,115,.LM14-.LFBB3
 198               	.LM14:
 199 0022 60E0      		ldi r22,0
 200 0024 81E2      		ldi r24,lo8(33)
 201 0026 0E94 0000 		call _Z9send_bytehb
 116:ttris.cpp     ****   //send byte to init Vop
 117:ttris.cpp     ****   send_byte(0b10010000, COMM);
 202               		.stabn	68,0,117,.LM15-.LFBB3
 203               	.LM15:
 204 002a 60E0      		ldi r22,0
 205 002c 80E9      		ldi r24,lo8(-112)
 206 002e 0E94 0000 		call _Z9send_bytehb
 118:ttris.cpp     ****   //send byte to select normal instruction set
 119:ttris.cpp     ****   send_byte(0b00100000, COMM);
 207               		.stabn	68,0,119,.LM16-.LFBB3
 208               	.LM16:
 209 0032 60E0      		ldi r22,0
 210 0034 80E2      		ldi r24,lo8(32)
 211 0036 0E94 0000 		call _Z9send_bytehb
 120:ttris.cpp     ****   //send byte to set screen to normal mode
 121:ttris.cpp     ****   send_byte(0b00001100, COMM);
 212               		.stabn	68,0,121,.LM17-.LFBB3
 213               	.LM17:
 214 003a 60E0      		ldi r22,0
 215 003c 8CE0      		ldi r24,lo8(12)
 216 003e 0E94 0000 		call _Z9send_bytehb
 122:ttris.cpp     ****   //set x DDRAM address to 0
 123:ttris.cpp     ****   send_byte(0b10000000, COMM);
 217               		.stabn	68,0,123,.LM18-.LFBB3
 218               	.LM18:
 219 0042 60E0      		ldi r22,0
 220 0044 80E8      		ldi r24,lo8(-128)
 221 0046 0E94 0000 		call _Z9send_bytehb
 124:ttris.cpp     ****   //set y DDRAM address to 0
 125:ttris.cpp     ****   send_byte(0b01000000, COMM);
 222               		.stabn	68,0,125,.LM19-.LFBB3
 223               	.LM19:
 224 004a 60E0      		ldi r22,0
 225 004c 80E4      		ldi r24,lo8(64)
 226 004e 0C94 0000 		jmp _Z9send_bytehb
 227               		.size	_Z11screen_initv, .-_Z11screen_initv
 228               	.Lscope3:
 229               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 230               		.stabd	78,0,0
 231               		.stabs	"_Z9set_pixeliib:F(0,4)",36,0,128,_Z9set_pixeliib
 232               		.stabs	"x:P(0,9)",64,0,128,18
 233               		.stabs	"y:P(0,9)",64,0,128,24
 234               		.stabs	"color:P(0,54)",64,0,128,20
 235               	.global	_Z9set_pixeliib
 236               		.type	_Z9set_pixeliib, @function
 237               	_Z9set_pixeliib:
 238               		.stabd	46,0,0
 126:ttris.cpp     **** }
 127:ttris.cpp     **** 
 128:ttris.cpp     **** void set_pixel(int x, int y, bool color)
 129:ttris.cpp     **** {
 239               		.stabn	68,0,129,.LM20-.LFBB4
 240               	.LM20:
 241               	.LFBB4:
 242 0052 CF93      		push r28
 243 0054 DF93      		push r29
 244               	/* prologue: function */
 245               	/* frame size = 0 */
 246               	/* stack size = 2 */
 247               	.L__stack_usage = 2
 248 0056 9C01      		movw r18,r24
 249 0058 CB01      		movw r24,r22
 250               	.LBB17:
 130:ttris.cpp     ****   //if out of bounds
 131:ttris.cpp     ****   if(x > 83 || y > 47)
 251               		.stabn	68,0,131,.LM21-.LFBB4
 252               	.LM21:
 253 005a 2435      		cpi r18,84
 254 005c 3105      		cpc r19,__zero_reg__
 255 005e 04F4      		brge .L15
 256               		.stabn	68,0,131,.LM22-.LFBB4
 257               	.LM22:
 258 0060 6033      		cpi r22,48
 259 0062 7105      		cpc r23,__zero_reg__
 260 0064 04F4      		brge .L15
 261               	.LBE17:
 262               	.LBB18:
 263               	.LBB19:
 132:ttris.cpp     ****   {
 133:ttris.cpp     ****     return;
 134:ttris.cpp     ****   }
 135:ttris.cpp     **** 
 136:ttris.cpp     ****   //Which byte to manipulate
 137:ttris.cpp     ****   int i = y/8;
 264               		.stabn	68,0,137,.LM23-.LFBB4
 265               	.LM23:
 266 0066 EB01      		movw r28,r22
 267 0068 77FD      		sbrc r23,7
 268 006a 2796      		adiw r28,7
 269               	.L17:
 270 006c 53E0      		ldi r21,3
 271               		1:
 272 006e D595      		asr r29
 273 0070 C795      		ror r28
 274 0072 5A95      		dec r21
 275 0074 01F4      		brne 1b
 138:ttris.cpp     ****   //Which bit in the byte to manipulate
 139:ttris.cpp     ****   int pos = y%8;
 276               		.stabn	68,0,139,.LM24-.LFBB4
 277               	.LM24:
 278 0076 68E0      		ldi r22,lo8(8)
 279 0078 70E0      		ldi r23,0
 280 007a 0E94 0000 		call __divmodhi4
 140:ttris.cpp     ****   //Positioning the byte for masking or oring
 141:ttris.cpp     ****   byte flag = 0x01;
 142:ttris.cpp     ****   flag = flag << pos;
 281               		.stabn	68,0,142,.LM25-.LFBB4
 282               	.LM25:
 283 007e 61E0      		ldi r22,lo8(1)
 284 0080 70E0      		ldi r23,0
 285 0082 FB01      		movw r30,r22
 286 0084 00C0      		rjmp 2f
 287               		1:
 288 0086 EE0F      		lsl r30
 289 0088 FF1F      		rol r31
 290               		2:
 291 008a 8A95      		dec r24
 292 008c 02F4      		brpl 1b
 293 008e CF01      		movw r24,r30
 143:ttris.cpp     **** 
 144:ttris.cpp     ****   //If setting it black, bitwise or
 145:ttris.cpp     ****   if(color)
 146:ttris.cpp     ****   {
 147:ttris.cpp     ****     //write the changes to the internal fbuff
 148:ttris.cpp     ****     fbuff[i][x] = fbuff[i][x] | flag;
 294               		.stabn	68,0,148,.LM26-.LFBB4
 295               	.LM26:
 296 0090 94E5      		ldi r25,lo8(84)
 297 0092 9C9F      		mul r25,r28
 298 0094 F001      		movw r30,r0
 299 0096 9D9F      		mul r25,r29
 300 0098 F00D      		add r31,r0
 301 009a 1124      		clr __zero_reg__
 302 009c 2E0F      		add r18,r30
 303 009e 3F1F      		adc r19,r31
 304 00a0 F901      		movw r30,r18
 305 00a2 E050      		subi r30,lo8(-(fbuff))
 306 00a4 F040      		sbci r31,hi8(-(fbuff))
 145:ttris.cpp     ****   {
 307               		.stabn	68,0,145,.LM27-.LFBB4
 308               	.LM27:
 309 00a6 4423      		tst r20
 310 00a8 01F0      		breq .L18
 311               		.stabn	68,0,148,.LM28-.LFBB4
 312               	.LM28:
 313 00aa 9081      		ld r25,Z
 314 00ac 892B      		or r24,r25
 315 00ae 00C0      		rjmp .L19
 316               	.L18:
 149:ttris.cpp     ****   }
 150:ttris.cpp     **** 
 151:ttris.cpp     ****   //If setting it white, mask and bitwise and
 152:ttris.cpp     ****   else
 153:ttris.cpp     ****   {
 154:ttris.cpp     ****     flag = ~flag;
 317               		.stabn	68,0,154,.LM29-.LFBB4
 318               	.LM29:
 319 00b0 8095      		com r24
 155:ttris.cpp     ****     fbuff[i][x] = fbuff[i][x] & flag;
 320               		.stabn	68,0,155,.LM30-.LFBB4
 321               	.LM30:
 322 00b2 9081      		ld r25,Z
 323 00b4 8923      		and r24,r25
 324               	.L19:
 325 00b6 8083      		st Z,r24
 326               	.L15:
 327               	/* epilogue start */
 328               	.LBE19:
 329               	.LBE18:
 156:ttris.cpp     ****   }
 157:ttris.cpp     **** }
 330               		.stabn	68,0,157,.LM31-.LFBB4
 331               	.LM31:
 332 00b8 DF91      		pop r29
 333 00ba CF91      		pop r28
 334 00bc 0895      		ret
 335               		.size	_Z9set_pixeliib, .-_Z9set_pixeliib
 336               	.Lscope4:
 337               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 338               		.stabd	78,0,0
 339               		.stabs	"_Z11blank_fbuffv:F(0,4)",36,0,159,_Z11blank_fbuffv
 340               	.global	_Z11blank_fbuffv
 341               		.type	_Z11blank_fbuffv, @function
 342               	_Z11blank_fbuffv:
 343               		.stabd	46,0,0
 158:ttris.cpp     **** 
 159:ttris.cpp     **** void blank_fbuff(){
 344               		.stabn	68,0,159,.LM32-.LFBB5
 345               	.LM32:
 346               	.LFBB5:
 347 00be 0F93      		push r16
 348 00c0 1F93      		push r17
 349 00c2 CF93      		push r28
 350 00c4 DF93      		push r29
 351               	/* prologue: function */
 352               	/* frame size = 0 */
 353               	/* stack size = 4 */
 354               	.L__stack_usage = 4
 355               		.stabn	68,0,159,.LM33-.LFBB5
 356               	.LM33:
 357 00c6 06E0      		ldi r16,lo8(6)
 358 00c8 10E0      		ldi r17,0
 359               	.L21:
 360 00ca C4E5      		ldi r28,lo8(84)
 361 00cc D0E0      		ldi r29,0
 362               	.L22:
 363               	.LBB20:
 364               	.LBB21:
 160:ttris.cpp     ****   for(int y = 0; y < 6; y++)
 161:ttris.cpp     ****   {
 162:ttris.cpp     ****     for(int x = 0; x < 84; x++)
 163:ttris.cpp     ****     {
 164:ttris.cpp     ****       send_byte(0, DATA);
 365               		.stabn	68,0,164,.LM34-.LFBB5
 366               	.LM34:
 367 00ce 61E0      		ldi r22,lo8(1)
 368 00d0 80E0      		ldi r24,0
 369 00d2 0E94 0000 		call _Z9send_bytehb
 370 00d6 2197      		sbiw r28,1
 162:ttris.cpp     ****     {
 371               		.stabn	68,0,162,.LM35-.LFBB5
 372               	.LM35:
 373 00d8 01F4      		brne .L22
 374 00da 0150      		subi r16,1
 375 00dc 1109      		sbc r17,__zero_reg__
 376               	.LBE21:
 160:ttris.cpp     ****   for(int y = 0; y < 6; y++)
 377               		.stabn	68,0,160,.LM36-.LFBB5
 378               	.LM36:
 379 00de 01F4      		brne .L21
 380               	/* epilogue start */
 381               	.LBE20:
 165:ttris.cpp     ****     }
 166:ttris.cpp     ****   }
 167:ttris.cpp     **** }
 382               		.stabn	68,0,167,.LM37-.LFBB5
 383               	.LM37:
 384 00e0 DF91      		pop r29
 385 00e2 CF91      		pop r28
 386 00e4 1F91      		pop r17
 387 00e6 0F91      		pop r16
 388 00e8 0895      		ret
 389               		.size	_Z11blank_fbuffv, .-_Z11blank_fbuffv
 390               	.Lscope5:
 391               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 392               		.stabd	78,0,0
 393               		.stabs	"_Z12update_framev:F(0,4)",36,0,169,_Z12update_framev
 394               	.global	_Z12update_framev
 395               		.type	_Z12update_framev, @function
 396               	_Z12update_framev:
 397               		.stabd	46,0,0
 168:ttris.cpp     **** 
 169:ttris.cpp     **** void update_frame()
 170:ttris.cpp     **** {
 398               		.stabn	68,0,170,.LM38-.LFBB6
 399               	.LM38:
 400               	.LFBB6:
 401 00ea AF92      		push r10
 402 00ec BF92      		push r11
 403 00ee CF92      		push r12
 404 00f0 DF92      		push r13
 405 00f2 EF92      		push r14
 406 00f4 FF92      		push r15
 407 00f6 0F93      		push r16
 408 00f8 1F93      		push r17
 409 00fa CF93      		push r28
 410 00fc DF93      		push r29
 411               	/* prologue: function */
 412               	/* frame size = 0 */
 413               	/* stack size = 10 */
 414               	.L__stack_usage = 10
 415 00fe 20E0      		ldi r18,lo8(pfbuff)
 416 0100 30E0      		ldi r19,hi8(pfbuff)
 417 0102 40E0      		ldi r20,lo8(fbuff)
 418 0104 50E0      		ldi r21,hi8(fbuff)
 419               	.L26:
 420               		.stabn	68,0,170,.LM39-.LFBB6
 421               	.LM39:
 422 0106 80E0      		ldi r24,0
 423 0108 90E0      		ldi r25,0
 424               	.L27:
 425 010a F901      		movw r30,r18
 426 010c E80F      		add r30,r24
 427 010e F91F      		adc r31,r25
 428 0110 DA01      		movw r26,r20
 429 0112 A80F      		add r26,r24
 430 0114 B91F      		adc r27,r25
 431               	.LBB22:
 432               	.LBB23:
 171:ttris.cpp     ****   //XOR all the bytes in pfbuff with the corresponding byte in fbuff and store
 172:ttris.cpp     ****   //the result in pfbuff
 173:ttris.cpp     ****   for(int y = 0; y < 6; y++)
 174:ttris.cpp     ****   {
 175:ttris.cpp     ****     for(int x = 0; x < 84; x++)
 176:ttris.cpp     ****     {
 177:ttris.cpp     ****       pfbuff[y][x] = pfbuff[y][x] ^ fbuff[y][x];
 433               		.stabn	68,0,177,.LM40-.LFBB6
 434               	.LM40:
 435 0116 7081      		ld r23,Z
 436 0118 6C91      		ld r22,X
 437 011a 6727      		eor r22,r23
 438 011c 6083      		st Z,r22
 175:ttris.cpp     ****     {
 439               		.stabn	68,0,175,.LM41-.LFBB6
 440               	.LM41:
 441 011e 0196      		adiw r24,1
 442 0120 8435      		cpi r24,84
 443 0122 9105      		cpc r25,__zero_reg__
 444 0124 01F4      		brne .L27
 445 0126 2C5A      		subi r18,-84
 446 0128 3F4F      		sbci r19,-1
 447 012a 4C5A      		subi r20,-84
 448 012c 5F4F      		sbci r21,-1
 449               	.LBE23:
 173:ttris.cpp     ****   {
 450               		.stabn	68,0,173,.LM42-.LFBB6
 451               	.LM42:
 452 012e 80E0      		ldi r24,hi8(pfbuff+504)
 453 0130 2030      		cpi r18,lo8(pfbuff+504)
 454 0132 3807      		cpc r19,r24
 455 0134 01F4      		brne .L26
 456 0136 C12C      		mov r12,__zero_reg__
 457 0138 D12C      		mov r13,__zero_reg__
 458 013a 00E0      		ldi r16,0
 459 013c 10E0      		ldi r17,0
 460               	.L28:
 461               	.LBE22:
 170:ttris.cpp     ****   //XOR all the bytes in pfbuff with the corresponding byte in fbuff and store
 462               		.stabn	68,0,170,.LM43-.LFBB6
 463               	.LM43:
 464 013e C0E0      		ldi r28,0
 465 0140 D0E0      		ldi r29,0
 466               	.LBB24:
 467               	.LBB25:
 468               	.LBB26:
 469               	.LBB27:
 178:ttris.cpp     ****     }
 179:ttris.cpp     ****   }
 180:ttris.cpp     ****   /*Send only the changed pixels to the screen*/
 181:ttris.cpp     ****   for(int y = 0; y < 6; y++)
 182:ttris.cpp     ****   {
 183:ttris.cpp     ****     for(int x = 0; x < 84; x++)
 184:ttris.cpp     ****     {
 185:ttris.cpp     ****       //If the current byte is not 0, a pixel has changed
 186:ttris.cpp     ****       if(pfbuff[y][x])
 187:ttris.cpp     ****       {
 188:ttris.cpp     ****         //update the y address in the screen
 189:ttris.cpp     ****         int sendy = y | 0b01000000;
 470               		.stabn	68,0,189,.LM44-.LFBB6
 471               	.LM44:
 472 0142 5801      		movw r10,r16
 473 0144 6894      		set
 474 0146 A6F8      		bld r10,6
 475               	.L30:
 476 0148 7E01      		movw r14,r28
 477 014a EC0C      		add r14,r12
 478 014c FD1C      		adc r15,r13
 479 014e F701      		movw r30,r14
 480 0150 E050      		subi r30,lo8(-(pfbuff))
 481 0152 F040      		sbci r31,hi8(-(pfbuff))
 482               	.LBE27:
 186:ttris.cpp     ****       {
 483               		.stabn	68,0,186,.LM45-.LFBB6
 484               	.LM45:
 485 0154 8081      		ld r24,Z
 486 0156 8823      		tst r24
 487 0158 01F0      		breq .L29
 488               	.LBB28:
 190:ttris.cpp     ****         send_byte(sendy, COMM);
 489               		.stabn	68,0,190,.LM46-.LFBB6
 490               	.LM46:
 491 015a 60E0      		ldi r22,0
 492 015c 8A2D      		mov r24,r10
 493 015e 0E94 0000 		call _Z9send_bytehb
 191:ttris.cpp     ****         //update the x address in the screen
 192:ttris.cpp     ****         int sendx = x | 0b10000000;
 193:ttris.cpp     ****         send_byte(sendx, COMM);
 494               		.stabn	68,0,193,.LM47-.LFBB6
 495               	.LM47:
 496 0162 60E0      		ldi r22,0
 497 0164 8C2F      		mov r24,r28
 498 0166 8068      		ori r24,lo8(-128)
 499 0168 0E94 0000 		call _Z9send_bytehb
 500 016c F701      		movw r30,r14
 501 016e E050      		subi r30,lo8(-(fbuff))
 502 0170 F040      		sbci r31,hi8(-(fbuff))
 194:ttris.cpp     ****         //Send the actual data from the current frame buffer
 195:ttris.cpp     ****         send_byte(fbuff[y][x], DATA);
 503               		.stabn	68,0,195,.LM48-.LFBB6
 504               	.LM48:
 505 0172 61E0      		ldi r22,lo8(1)
 506 0174 8081      		ld r24,Z
 507 0176 0E94 0000 		call _Z9send_bytehb
 508               	.L29:
 509               	.LBE28:
 510               	.LBE26:
 183:ttris.cpp     ****     {
 511               		.stabn	68,0,183,.LM49-.LFBB6
 512               	.LM49:
 513 017a 2196      		adiw r28,1
 514 017c C435      		cpi r28,84
 515 017e D105      		cpc r29,__zero_reg__
 516 0180 01F4      		brne .L30
 517               	.LBE25:
 181:ttris.cpp     ****   {
 518               		.stabn	68,0,181,.LM50-.LFBB6
 519               	.LM50:
 520 0182 0F5F      		subi r16,-1
 521 0184 1F4F      		sbci r17,-1
 522 0186 84E5      		ldi r24,84
 523 0188 C80E      		add r12,r24
 524 018a D11C      		adc r13,__zero_reg__
 525 018c 0630      		cpi r16,6
 526 018e 1105      		cpc r17,__zero_reg__
 527 0190 01F4      		brne .L28
 528 0192 20E0      		ldi r18,0
 529 0194 30E0      		ldi r19,0
 530               	.L31:
 531               	.LBE24:
 532               	.LBB29:
 533 0196 80E0      		ldi r24,0
 534 0198 90E0      		ldi r25,0
 535               	.L32:
 536 019a AC01      		movw r20,r24
 537 019c 420F      		add r20,r18
 538 019e 531F      		adc r21,r19
 539 01a0 FA01      		movw r30,r20
 540 01a2 E050      		subi r30,lo8(-(pfbuff))
 541 01a4 F040      		sbci r31,hi8(-(pfbuff))
 542 01a6 DA01      		movw r26,r20
 543 01a8 A050      		subi r26,lo8(-(fbuff))
 544 01aa B040      		sbci r27,hi8(-(fbuff))
 545               	.LBE29:
 546               	.LBB30:
 547               	.LBB31:
 196:ttris.cpp     ****       }
 197:ttris.cpp     ****     }
 198:ttris.cpp     ****   }
 199:ttris.cpp     **** 
 200:ttris.cpp     ****   //Copy the current frame to pfbuff for future comparisons
 201:ttris.cpp     ****   for(int y = 0; y < 6; y++)
 202:ttris.cpp     ****   {
 203:ttris.cpp     ****     for(int x = 0; x < 84; x++)
 204:ttris.cpp     ****     {
 205:ttris.cpp     ****       pfbuff[y][x] = fbuff[y][x];
 548               		.stabn	68,0,205,.LM51-.LFBB6
 549               	.LM51:
 550 01ac 4C91      		ld r20,X
 551 01ae 4083      		st Z,r20
 203:ttris.cpp     ****     {
 552               		.stabn	68,0,203,.LM52-.LFBB6
 553               	.LM52:
 554 01b0 0196      		adiw r24,1
 555 01b2 8435      		cpi r24,84
 556 01b4 9105      		cpc r25,__zero_reg__
 557 01b6 01F4      		brne .L32
 558 01b8 2C5A      		subi r18,-84
 559 01ba 3F4F      		sbci r19,-1
 560               	.LBE31:
 201:ttris.cpp     ****   {
 561               		.stabn	68,0,201,.LM53-.LFBB6
 562               	.LM53:
 563 01bc 283F      		cpi r18,-8
 564 01be 81E0      		ldi r24,1
 565 01c0 3807      		cpc r19,r24
 566 01c2 01F4      		brne .L31
 567               	/* epilogue start */
 568               	.LBE30:
 206:ttris.cpp     ****     }
 207:ttris.cpp     ****   }
 208:ttris.cpp     **** }
 569               		.stabn	68,0,208,.LM54-.LFBB6
 570               	.LM54:
 571 01c4 DF91      		pop r29
 572 01c6 CF91      		pop r28
 573 01c8 1F91      		pop r17
 574 01ca 0F91      		pop r16
 575 01cc FF90      		pop r15
 576 01ce EF90      		pop r14
 577 01d0 DF90      		pop r13
 578 01d2 CF90      		pop r12
 579 01d4 BF90      		pop r11
 580 01d6 AF90      		pop r10
 581 01d8 0895      		ret
 582               		.size	_Z12update_framev, .-_Z12update_framev
 583               		.stabs	"x:r(0,9)",64,0,175,24
 584               		.stabn	192,0,0,.LBB23-.LFBB6
 585               		.stabn	224,0,0,.LBE23-.LFBB6
 586               		.stabs	"y:r(0,9)",64,0,181,16
 587               		.stabn	192,0,0,.LBB24-.LFBB6
 588               		.stabs	"x:r(0,9)",64,0,183,28
 589               		.stabn	192,0,0,.LBB25-.LFBB6
 590               		.stabn	224,0,0,.LBE25-.LFBB6
 591               		.stabn	224,0,0,.LBE24-.LFBB6
 592               		.stabs	"x:r(0,9)",64,0,203,24
 593               		.stabn	192,0,0,.LBB31-.LFBB6
 594               		.stabn	224,0,0,.LBE31-.LFBB6
 595               	.Lscope6:
 596               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 597               		.stabd	78,0,0
 598               		.section	.text.startup,"ax",@progbits
 599               		.stabs	"main:F(0,9)",36,0,210,main
 600               	.global	main
 601               		.type	main, @function
 602               	main:
 603               		.stabd	46,0,0
 209:ttris.cpp     **** 
 210:ttris.cpp     **** int main(void)
 211:ttris.cpp     **** {
 604               		.stabn	68,0,211,.LM55-.LFBB7
 605               	.LM55:
 606               	.LFBB7:
 607               	/* prologue: function */
 608               	/* frame size = 0 */
 609               	/* stack size = 0 */
 610               	.L__stack_usage = 0
 611               	.LBB32:
 612               	.LBB33:
 613               	.LBB34:
 614               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext1
 615               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 616               		.stabn	68,0,163,.LM56-.LFBB7
 617               	.LM56:
 618 0000 2FEF      		ldi r18,lo8(639999)
 619 0002 83EC      		ldi r24,hi8(639999)
 620 0004 99E0      		ldi r25,hlo8(639999)
 621 0006 2150      	1:	subi r18,1
 622 0008 8040      		sbci r24,0
 623 000a 9040      		sbci r25,0
 624 000c 01F4      		brne 1b
 625 000e 00C0      		rjmp .
 626 0010 0000      		nop
 627               	.LBE34:
 628               	.LBE33:
 629               		.stabs	"ttris.cpp",132,0,0,.Ltext2
 630               	.Ltext2:
 212:ttris.cpp     ****   //Give the AVR a bit to boot
 213:ttris.cpp     ****   _delay_ms(200);
 214:ttris.cpp     ****   //Initialize the SPI bus
 215:ttris.cpp     ****   spi_init_master();
 631               		.stabn	68,0,215,.LM57-.LFBB7
 632               	.LM57:
 633 0012 0E94 0000 		call _Z15spi_init_masterv
 216:ttris.cpp     ****   //Initialize the screen
 217:ttris.cpp     ****   screen_init();
 634               		.stabn	68,0,217,.LM58-.LFBB7
 635               	.LM58:
 636 0016 0E94 0000 		call _Z11screen_initv
 218:ttris.cpp     ****   //Blank out the screen
 219:ttris.cpp     ****   blank_fbuff();
 637               		.stabn	68,0,219,.LM59-.LFBB7
 638               	.LM59:
 639 001a 0E94 0000 		call _Z11blank_fbuffv
 640               	.L45:
 641               	.LBB35:
 220:ttris.cpp     ****   //Update the frame
 221:ttris.cpp     ****   while(1)
 222:ttris.cpp     ****   {
 223:ttris.cpp     ****     for(int x = 0; x < 83; x++)
 642               		.stabn	68,0,223,.LM60-.LFBB7
 643               	.LM60:
 644 001e 00E0      		ldi r16,0
 645 0020 10E0      		ldi r17,0
 646               	.L43:
 647               	.LBE35:
 648               	.LBE32:
 211:ttris.cpp     ****   //Give the AVR a bit to boot
 649               		.stabn	68,0,211,.LM61-.LFBB7
 650               	.LM61:
 651 0022 C0E0      		ldi r28,0
 652 0024 D0E0      		ldi r29,0
 653               	.L44:
 654               	.LBB38:
 655               	.LBB37:
 656               	.LBB36:
 224:ttris.cpp     ****     {
 225:ttris.cpp     ****       for(int y = 0; y < 48; y++)
 226:ttris.cpp     ****       {
 227:ttris.cpp     ****         set_pixel(x, y, BLACK);
 657               		.stabn	68,0,227,.LM62-.LFBB7
 658               	.LM62:
 659 0026 41E0      		ldi r20,lo8(1)
 660 0028 BE01      		movw r22,r28
 661 002a C801      		movw r24,r16
 662 002c 0E94 0000 		call _Z9set_pixeliib
 228:ttris.cpp     ****         update_frame();
 663               		.stabn	68,0,228,.LM63-.LFBB7
 664               	.LM63:
 665 0030 0E94 0000 		call _Z12update_framev
 225:ttris.cpp     ****       {
 666               		.stabn	68,0,225,.LM64-.LFBB7
 667               	.LM64:
 668 0034 2196      		adiw r28,1
 669 0036 C033      		cpi r28,48
 670 0038 D105      		cpc r29,__zero_reg__
 671 003a 01F4      		brne .L44
 672               	.LBE36:
 223:ttris.cpp     ****     {
 673               		.stabn	68,0,223,.LM65-.LFBB7
 674               	.LM65:
 675 003c 0F5F      		subi r16,-1
 676 003e 1F4F      		sbci r17,-1
 677 0040 0335      		cpi r16,83
 678 0042 1105      		cpc r17,__zero_reg__
 679 0044 01F4      		brne .L43
 680 0046 00C0      		rjmp .L45
 681               	.LBE37:
 682               	.LBE38:
 683               		.size	main, .-main
 684               		.stabs	"x:r(0,9)",64,0,223,16
 685               		.stabn	192,0,0,.LBB35-.LFBB7
 686               		.stabs	"y:r(0,9)",64,0,225,28
 687               		.stabn	192,0,0,.LBB36-.LFBB7
 688               		.stabn	224,0,0,.LBE36-.LFBB7
 689               		.stabn	224,0,0,.LBE35-.LFBB7
 690               		.stabs	"x:r(0,9)",64,0,223,16
 691               		.stabn	192,0,0,.LBB37-.LFBB7
 692               		.stabn	224,0,0,.LBE37-.LFBB7
 693               	.Lscope7:
 694               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 695               		.stabd	78,0,0
 696               	.global	spritemap
 697               		.data
 698               		.type	spritemap, @object
 699               		.size	spritemap, 168
 700               	spritemap:
 701 0000 00        		.byte	0
 702 0001 6E        		.byte	110
 703 0002 8A        		.byte	-118
 704 0003 EA        		.byte	-22
 705 0004 8A        		.byte	-118
 706 0005 EE        		.byte	-18
 707 0006 00        		.byte	0
 708 0007 64        		.byte	100
 709 0008 84        		.byte	-124
 710 0009 E4        		.byte	-28
 711 000a 84        		.byte	-124
 712 000b 84        		.byte	-124
 713 000c 00        		.byte	0
 714 000d 6E        		.byte	110
 715 000e 82        		.byte	-126
 716 000f EE        		.byte	-18
 717 0010 A8        		.byte	-88
 718 0011 EE        		.byte	-18
 719 0012 00        		.byte	0
 720 0013 AE        		.byte	-82
 721 0014 A2        		.byte	-94
 722 0015 EE        		.byte	-18
 723 0016 A2        		.byte	-94
 724 0017 AE        		.byte	-82
 725 0018 00        		.byte	0
 726 0019 EA        		.byte	-22
 727 001a 4A        		.byte	74
 728 001b 4E        		.byte	78
 729 001c 42        		.byte	66
 730 001d E2        		.byte	-30
 731 001e 00        		.byte	0
 732 001f 2E        		.byte	46
 733 0020 28        		.byte	40
 734 0021 2E        		.byte	46
 735 0022 A2        		.byte	-94
 736 0023 6E        		.byte	110
 737 0024 00        		.byte	0
 738 0025 AE        		.byte	-82
 739 0026 A8        		.byte	-88
 740 0027 CE        		.byte	-50
 741 0028 AA        		.byte	-86
 742 0029 AE        		.byte	-82
 743 002a 00        		.byte	0
 744 002b 8E        		.byte	-114
 745 002c 82        		.byte	-126
 746 002d 82        		.byte	-126
 747 002e 82        		.byte	-126
 748 002f E2        		.byte	-30
 749 0030 00        		.byte	0
 750 0031 AE        		.byte	-82
 751 0032 EA        		.byte	-22
 752 0033 EE        		.byte	-18
 753 0034 AA        		.byte	-86
 754 0035 AE        		.byte	-82
 755 0036 00        		.byte	0
 756 0037 AE        		.byte	-82
 757 0038 EA        		.byte	-22
 758 0039 EE        		.byte	-18
 759 003a E2        		.byte	-30
 760 003b AE        		.byte	-82
 761 003c 00        		.byte	0
 762 003d 44        		.byte	68
 763 003e AA        		.byte	-86
 764 003f AE        		.byte	-82
 765 0040 AA        		.byte	-86
 766 0041 4A        		.byte	74
 767 0042 00        		.byte	0
 768 0043 CC        		.byte	-52
 769 0044 AA        		.byte	-86
 770 0045 EC        		.byte	-20
 771 0046 8A        		.byte	-118
 772 0047 8E        		.byte	-114
 773 0048 00        		.byte	0
 774 0049 46        		.byte	70
 775 004a A8        		.byte	-88
 776 004b A8        		.byte	-88
 777 004c E8        		.byte	-24
 778 004d 6E        		.byte	110
 779 004e 00        		.byte	0
 780 004f CC        		.byte	-52
 781 0050 AA        		.byte	-86
 782 0051 EA        		.byte	-22
 783 0052 CA        		.byte	-54
 784 0053 AE        		.byte	-82
 785 0054 00        		.byte	0
 786 0055 46        		.byte	70
 787 0056 48        		.byte	72
 788 0057 44        		.byte	68
 789 0058 02        		.byte	2
 790 0059 4E        		.byte	78
 791 005a 00        		.byte	0
 792 005b EE        		.byte	-18
 793 005c 24        		.byte	36
 794 005d 64        		.byte	100
 795 005e 04        		.byte	4
 796 005f 44        		.byte	68
 797 0060 00        		.byte	0
 798 0061 AA        		.byte	-86
 799 0062 AA        		.byte	-86
 800 0063 0A        		.byte	10
 801 0064 AA        		.byte	-86
 802 0065 46        		.byte	70
 803 0066 00        		.byte	0
 804 0067 AA        		.byte	-86
 805 0068 4A        		.byte	74
 806 0069 EA        		.byte	-22
 807 006a 44        		.byte	68
 808 006b A4        		.byte	-92
 809 006c 00        		.byte	0
 810 006d 0A        		.byte	10
 811 006e 0A        		.byte	10
 812 006f 0E        		.byte	14
 813 0070 0E        		.byte	14
 814 0071 4A        		.byte	74
 815 0072 00        		.byte	0
 816 0073 4A        		.byte	74
 817 0074 4A        		.byte	74
 818 0075 04        		.byte	4
 819 0076 0A        		.byte	10
 820 0077 0A        		.byte	10
 821 0078 00        		.byte	0
 822 0079 EA        		.byte	-22
 823 007a EA        		.byte	-22
 824 007b E4        		.byte	-28
 825 007c E4        		.byte	-28
 826 007d E4        		.byte	-28
 827 007e 00        		.byte	0
 828 007f 0E        		.byte	14
 829 0080 02        		.byte	2
 830 0081 04        		.byte	4
 831 0082 08        		.byte	8
 832 0083 0E        		.byte	14
 833 0084 00        		.byte	0
 834 0085 06        		.byte	6
 835 0086 06        		.byte	6
 836 0087 1E        		.byte	30
 837 0088 1E        		.byte	30
 838 0089 18        		.byte	24
 839 008a 18        		.byte	24
 840 008b 00        		.byte	0
 841 008c 18        		.byte	24
 842 008d 18        		.byte	24
 843 008e 1E        		.byte	30
 844 008f 1E        		.byte	30
 845 0090 06        		.byte	6
 846 0091 06        		.byte	6
 847 0092 C0        		.byte	-64
 848 0093 C6        		.byte	-58
 849 0094 F6        		.byte	-10
 850 0095 F6        		.byte	-10
 851 0096 C6        		.byte	-58
 852 0097 C6        		.byte	-58
 853 0098 06        		.byte	6
 854 0099 C6        		.byte	-58
 855 009a C6        		.byte	-58
 856 009b C0        		.byte	-64
 857 009c C6        		.byte	-58
 858 009d F6        		.byte	-10
 859 009e F6        		.byte	-10
 860 009f 06        		.byte	6
 861 00a0 1E        		.byte	30
 862 00a1 1E        		.byte	30
 863 00a2 00        		.byte	0
 864 00a3 1E        		.byte	30
 865 00a4 1E        		.byte	30
 866 00a5 1E        		.byte	30
 867 00a6 1E        		.byte	30
 868 00a7 00        		.byte	0
 869               	.global	pfbuff
 870               		.section .bss
 871               		.type	pfbuff, @object
 872               		.size	pfbuff, 504
 873               	pfbuff:
 874 0000 0000 0000 		.zero	504
 874      0000 0000 
 874      0000 0000 
 874      0000 0000 
 874      0000 0000 
 875               	.global	fbuff
 876               		.type	fbuff, @object
 877               		.size	fbuff, 504
 878               	fbuff:
 879 01f8 0000 0000 		.zero	504
 879      0000 0000 
 879      0000 0000 
 879      0000 0000 
 879      0000 0000 
 880               		.stabs	"fbuff:G(0,91)=ar(0,92)=r(0,92);0;0177777;;0;5;(0,93)=ar(0,92);0;83;(0,89)",32,0,38,0
 881               		.stabs	"pfbuff:G(0,91)",32,0,49,0
 882               		.stabs	"spritemap:G(0,94)=ar(0,92);0;1;(0,93)",32,0,58,0
 883               		.text
 884               		.stabs	"",100,0,0,.Letext0
 885               	.Letext0:
 886               		.ident	"GCC: (GNU) 4.9.2"
 887               	.global __do_copy_data
 888               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ttris.cpp
     /tmp/ccKMMYWm.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccKMMYWm.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccKMMYWm.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccKMMYWm.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccKMMYWm.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccKMMYWm.s:109    .text:0000000000000000 _Z15spi_init_masterv
     /tmp/ccKMMYWm.s:136    .text:000000000000000a _Z9send_bytehb
     /tmp/ccKMMYWm.s:179    .text:000000000000001c _Z11screen_initv
     /tmp/ccKMMYWm.s:237    .text:0000000000000052 _Z9set_pixeliib
     /tmp/ccKMMYWm.s:878    .bss:00000000000001f8 fbuff
     /tmp/ccKMMYWm.s:342    .text:00000000000000be _Z11blank_fbuffv
     /tmp/ccKMMYWm.s:396    .text:00000000000000ea _Z12update_framev
     /tmp/ccKMMYWm.s:873    .bss:0000000000000000 pfbuff
     /tmp/ccKMMYWm.s:602    .text.startup:0000000000000000 main
     /tmp/ccKMMYWm.s:700    .data:0000000000000000 spritemap

UNDEFINED SYMBOLS
__divmodhi4
__do_copy_data
__do_clear_bss
