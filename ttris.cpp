#define F_CPU  16000000UL

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

typedef unsigned char byte;

#define HIGH 1
#define LOW 0

//Define the SPI Pins to communicate with the screen
//Define the data direction registers
#define DDR_SPI         DDRB
#define DD_SCK          DDB5
#define DD_MISO         DDB4
#define DD_MOSI         DDB3
#define DD_SS           DDB2
#define DD_DC           DDB1
#define DD_RST          DDB0

//Define the port registers
#define PORT_SPI        PORTB
#define PORT_SCK        (1 << PB5) //yellow
#define PORT_MISO       (1 << PB4) //green (unused)
#define PORT_MOSI       (1 << PB3) //white
#define PORT_SS         (1 << PB2) //orange
#define PORT_DC         (1 << PB1) //blue
#define PORT_RST        (1 << PB0) //green

//Init the video buffer
byte vbuff[6][84] = {
0xff, 0xff, 0x03, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe3, 0xf3, 0x73, 0x3f, 0x3f, 0x00, 0x00, 0x23, 0x33, 0x33, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0x3f, 0x30, 0x78, 0xff, 0x00, 0x00, 0x3f, 0x3f, 0x33, 0x73, 0xf3, 0x00, 0x00, 0xff, 0xff, 0x73, 0x73, 0xf3, 0x00, 0x00, 0x03, 0x03, 0x03, 0x07, 0xff, 0x00, 0x00, 0xff, 0xff, 0x73, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0x3f, 0x33, 0x7f, 0xff, 0x00, 0x00, 0xfc, 0xfc, 0x73, 0x7b, 0xfc, 0x00, 0x00, 0xff, 0xff, 0x73, 0x33, 0xcc, 0x00, 0x00, 0x87, 0x87, 0x67, 0x67, 0x63, 0x00, 0x00, 0xe0, 0xe0, 0x63, 0x63, 0x80, 0x00, 0x00, 0xe3, 0xe7, 0x67, 0x67, 0x63, 0x00, 0x00, 0xe2, 0xe7, 0x67, 0x67, 0x63, 0x00, 0x00, 0x80, 0x80, 0x60, 0x60, 0x63, 0x00, 0x00, 0xe2, 0xe7, 0x07, 0x07, 0xe3, 0x00, 0x00, 0x23, 0x67, 0xe7, 0xe7, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x00, 0x00, 0xe3, 0xe7, 0x07, 0x07, 0xe3, 0x00, 0x00, 0xe2, 0xe7, 0x07, 0x07, 0x03, 0x00, 0x00, 0xe3, 0xe3, 0xc0, 0xc0, 0xe3, 0x00, 0x00, 0xe3, 0xe7, 0xc7, 0xc3, 0xe0, 0x00, 0x00, 0x7f, 0x7f, 0x60, 0x60, 0x60, 0x00, 0x00, 0x7f, 0x7f, 0x60, 0x70, 0x7f, 0x00, 0x00, 0x7f, 0x7f, 0x66, 0x66, 0x66, 0x00, 0x00, 0x7f, 0x7f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x66, 0x7e, 0x7e, 0x00, 0x00, 0x7f, 0x7f, 0x06, 0x0f, 0x7f, 0x00, 0x00, 0x60, 0x70, 0x7f, 0x7f, 0x60, 0x00, 0x00, 0x18, 0x18, 0x60, 0x70, 0x7f, 0x00, 0x00, 0x7f, 0x7f, 0x06, 0x06, 0x79, 0x00, 0x00, 0x7f, 0x7f, 0x60, 0x60, 0x60, 0x00, 0x00, 0x7f, 0x7f, 0x07, 0x0f, 0x7f, 0x00, 0x00, 0x7f, 0x7f, 0x1f, 0x3f, 0x7f, 0x00, 0x00, 0xf8, 0xf8, 0x06, 0x04, 0xf8, 0x00, 0x00, 0xfe, 0xfe, 0xe6, 0x74, 0x78, 0x00, 0x00, 0xf0, 0xf8, 0x86, 0x84, 0xf8, 0x00, 0x00, 0xfe, 0xfe, 0xe6, 0xf4, 0x78, 0x00, 0x00, 0x10, 0x18, 0x66, 0x46, 0x86, 0x00, 0x00, 0x06, 0x0e, 0xfe, 0xfe, 0x06, 0x00, 0x00, 0xfe, 0xfc, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x7e, 0x7c, 0x80, 0x80, 0x7e, 0x00, 0x00, 0xfe, 0xfc, 0xe0, 0xf0, 0xfe, 0x00, 0x00, 0x1e, 0x9c, 0x60, 0x60, 0x9e, 0x00, 0x00, 0x1e, 0x1c, 0xe0, 0xe0, 0x1e, 0x00, 0x00, 0x06, 0x86, 0x66, 0x6e, 0x1e, 0x00, 0x00, 0x03, 0x03, 0xc6, 0xc6, 0x01, 0x00, 0x00, 0x47, 0xc7, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0xc1, 0xc3, 0x07, 0x0f, 0xc7, 0x00, 0x00, 0x47, 0xc7, 0x03, 0x03, 0xc4, 0x00, 0x00, 0x04, 0x0e, 0x0e, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc7, 0xc7, 0x00, 0x00, 0x00, 0x01, 0x03, 0xc6, 0xce, 0x07, 0x00, 0x00, 0x00, 0x80, 0xc7, 0xc7, 0x00, 0x00, 0x00, 0x47, 0xc7, 0x03, 0x03, 0x07, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x0f, 0xce, 0xce, 0xc4, 0x00, 0x00, 0x00, 0x00, 0xcf, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x8f, 0x0f, 0x00, 0x00, 0x31, 0x31, 0xc0, 0xc0, 0x33, 0x00, 0x00, 0xcc, 0xce, 0x3f, 0x3f, 0xcc, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x30, 0x38, 0xff, 0xff, 0x30, 0x00, 0x00, 0x01, 0x03, 0xff, 0xff, 0x03, 0x00, 0x00, 0xc0, 0xc0, 0x33, 0x12, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x33, 0x21, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x00,
};

// Initialize SPI Master Device (with SPI interrupt)
void spi_init_master (void)
{
    // Set MOSI, SCK, SS, DC, and RST as Output
    DDR_SPI=(1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS)|(1<<DD_DC)|(1<<DD_RST);

    // Enable SPI, Set as Master
    // Prescaler: Fosc/16, Enable Interrupts
    //The MOSI, SCK pins are as per ATMega8
    SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
}

//Function to send and receive data for both master and slave
void send_byte(byte data, bool dc)
{
    // Load data into the buffer
    SPDR = data;

    //If DC is high, pull the pin high
    if(dc)
    {
      PORT_SPI |= (PORT_DC);
    }

    //Wait until transmission complete
    while(!(SPSR & (1<<SPIF)));

    //Pull DC low again if it was set high
    if(dc)
    {
      PORT_SPI &= ~(PORT_DC);
    }
    return;
}

void init_screen(void)
{
  //Toggle the reset pin then set it high
  PORT_SPI |= (PORT_RST);
  PORT_SPI &= ~(PORT_RST);
  PORT_SPI |= (PORT_RST);

  //send a byte to init function set
  send_byte(0b00100001, LOW);
  //send byte to init Vop
  send_byte(0b10010000, LOW);
  //send byte to select normal instruction set
  send_byte(0b00100000, LOW);
  //send byte to set screen to normal mode
  send_byte(0b00001100, LOW);
  //set x DDRAM address to 0
  send_byte(0b10000000, LOW);
  //set y DDRAM address to 0
  send_byte(0b01000000, LOW);
}

void show_frame(){
  for(int y = 0; y <= 5; y++)
  {
    for(int x = 0; x <= 83; x++)
    {
      send_byte(vbuff[y][x], 1);
    }
  }
}

int main(void)
{
  //Give the AVR a bit to boot
  _delay_ms(200);
  //Initialize the SPI bus
  spi_init_master();
  //Initialize the screen
  init_screen();
  //send display data
  show_frame();

  return(0);
}
